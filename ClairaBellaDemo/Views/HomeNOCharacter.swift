//
//  HomeNOCharacter.swift
//
//  Created on 05/05/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class HomeNOCharacter: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Home
    
    class func drawHomeNoCharacters(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 2427), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 2427), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 2427)
        
        /// Background Color
        UIColor(hue: 0.882, saturation: 0.11, brightness: 1, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// PLACEHOLDER - Create Character Tile
        do {
            context.saveGState()
            context.translateBy(x: -42, y: 2070)
            
            /// Rectangle 15
            let rectangle15 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 320, height: 201.79))
            context.saveGState()
            context.translateBy(x: 42, y: 0)
            UIColor(hue: 0.547, saturation: 0.675, brightness: 0.918, alpha: 1).setFill()
            rectangle15.fill()
            context.restoreGState()
            
            /// Rectangle 15
            let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 320, height: 86.42))
            context.saveGState()
            context.translateBy(x: 202, y: 245)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -160, y: -43.21)
            UIColor(hue: 0.076, saturation: 0.184, brightness: 0.702, alpha: 1).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            /// Create characters fo
            let createCharactersFo = NSMutableAttributedString(string: "Create characters for\nall your Friends!")
            createCharactersFo.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 22)!, range: NSRange(location: 0, length: createCharactersFo.length))
            createCharactersFo.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.855, saturation: 0.024, brightness: 0.96, alpha: 1), range: NSRange(location: 0, length: createCharactersFo.length))
            createCharactersFo.addAttribute(NSKernAttributeName, value: -0.29, range: NSRange(location: 0, length: createCharactersFo.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                createCharactersFo.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: createCharactersFo.length))
            }
            context.saveGState()
            createCharactersFo.draw(in: CGRect(x: 40, y: 14, width: 320, height: 58))
            context.restoreGState()
            
            /// Rectangle 14
            let rectangle14 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 240, height: 48), cornerRadius: 21)
            context.saveGState()
            context.translateBy(x: 82, y: 221)
            UIColor.white.setFill()
            rectangle14.fill()
            context.saveGState()
            rectangle14.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle14.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setStroke()
            rectangle14.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Create Now
            let createNow = NSMutableAttributedString(string: "Create Now")
            createNow.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: createNow.length))
            createNow.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: createNow.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                createNow.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: createNow.length))
            }
            context.saveGState()
            createNow.draw(in: CGRect(x: 42, y: 234, width: 320, height: 24))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// PLACEHOLDER - Shop Tiles
        do {
            context.saveGState()
            context.translateBy(x: -64, y: 1075)
            
            /// group 1
            // Warning: Image layers are not supported.
            
            /// Gifts everyone is ta
            let giftsEveryoneIsTa = NSMutableAttributedString(string: "Gifts everyone is talking about!")
            giftsEveryoneIsTa.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 22)!, range: NSRange(location: 0, length: giftsEveryoneIsTa.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                giftsEveryoneIsTa.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: giftsEveryoneIsTa.length))
            }
            context.saveGState()
            giftsEveryoneIsTa.draw(in: CGRect(x: 101, y: 330, width: 240, height: 58))
            context.restoreGState()
            
            /// Rectangle 14
            let rectangle16 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 240, height: 48), cornerRadius: 21)
            context.saveGState()
            context.translateBy(x: 104, y: 392)
            UIColor.white.setFill()
            rectangle16.fill()
            context.saveGState()
            rectangle16.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle16.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setStroke()
            rectangle16.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Shop Collection
            let shopCollection = NSMutableAttributedString(string: "Shop Collection")
            shopCollection.addAttribute(NSFontAttributeName, value: UIFont(name: "AppleSDGothicNeo-Bold", size: 16)!, range: NSRange(location: 0, length: shopCollection.length))
            shopCollection.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: shopCollection.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                shopCollection.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: shopCollection.length))
            }
            context.saveGState()
            shopCollection.draw(in: CGRect(x: 64, y: 408, width: 320, height: 21))
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 432, height: 654))
            context.saveGState()
            context.translateBy(x: 41, y: 320)
            UIColor(hue: 0.083, saturation: 0.016, brightness: 0.988, alpha: 1).setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// Rectangle 4 Copy
            let rectangle4Copy = UIBezierPath()
            rectangle4Copy.move(to: CGPoint(x: 0, y: 0.4))
            rectangle4Copy.addLine(to: CGPoint(x: 159.75, y: 0))
            rectangle4Copy.addLine(to: CGPoint(x: 159.75, y: 50))
            rectangle4Copy.addLine(to: CGPoint(x: 0, y: 50.4))
            rectangle4Copy.addLine(to: CGPoint(x: 0, y: 0.4))
            rectangle4Copy.close()
            rectangle4Copy.move(to: CGPoint(x: 0, y: 0.4))
            context.saveGState()
            context.translateBy(x: 159.08, y: 48.35)
            context.rotate(by: 363 * CGFloat.pi/180)
            context.translateBy(x: -79.88, y: -25.2)
            rectangle4Copy.usesEvenOddFillRule = true
            UIColor(hue: 0.143, saturation: 0.433, brightness: 0.996, alpha: 1).setFill()
            rectangle4Copy.fill()
            context.restoreGState()
            
            /// Shop
            let shop = NSMutableAttributedString(string: "Shop")
            shop.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 38.4)!, range: NSRange(location: 0, length: shop.length))
            shop.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: shop.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 50.4
                paragraphStyle.minimumLineHeight = 50.4
                shop.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: shop.length))
            }
            context.saveGState()
            shop.draw(in: CGRect(x: 0, y: 20, width: 320, height: 56))
            context.restoreGState()
            
            /// Collecions
            do {
                context.saveGState()
                context.translateBy(x: 70, y: 467)
                
                /// Screen Shot 2017-03-24 at 16.51.32
                // Warning: Image layers are not supported.
                
                /// Screen Shot 2017-03-24 at 16.50.20
                // Warning: Image layers are not supported.
                
                /// Jute Bags
                let juteBags = NSMutableAttributedString(string: "Jute Bags")
                juteBags.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: juteBags.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    juteBags.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: juteBags.length))
                }
                context.saveGState()
                juteBags.draw(in: CGRect(x: 1, y: 172, width: 149, height: 24))
                context.restoreGState()
                
                /// Charlotte Crosby
                let charlotteCrosby = NSMutableAttributedString(string: "Charlotte Crosby")
                charlotteCrosby.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 12)!, range: NSRange(location: 0, length: charlotteCrosby.length))
                charlotteCrosby.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: charlotteCrosby.length))
                charlotteCrosby.addAttribute(NSKernAttributeName, value: 0.26, range: NSRange(location: 0, length: charlotteCrosby.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    charlotteCrosby.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: charlotteCrosby.length))
                }
                context.saveGState()
                charlotteCrosby.draw(in: CGRect(x: 0, y: 157, width: 149, height: 16))
                context.restoreGState()
                
                /// Phone Cases
                let phoneCases = NSMutableAttributedString(string: "Phone Cases")
                phoneCases.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: phoneCases.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    phoneCases.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: phoneCases.length))
                }
                context.saveGState()
                phoneCases.draw(in: CGRect(x: 158, y: 172, width: 149, height: 24))
                context.restoreGState()
                
                /// Stephanie Pratt
                let stephaniePratt = NSMutableAttributedString(string: "Stephanie Pratt")
                stephaniePratt.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 12)!, range: NSRange(location: 0, length: stephaniePratt.length))
                stephaniePratt.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: stephaniePratt.length))
                stephaniePratt.addAttribute(NSKernAttributeName, value: 0.26, range: NSRange(location: 0, length: stephaniePratt.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    stephaniePratt.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: stephaniePratt.length))
                }
                context.saveGState()
                stephaniePratt.draw(in: CGRect(x: 157, y: 157, width: 149, height: 16))
                context.restoreGState()
                
                /// Screen Shot 2017-03-24 at 16.57.00
                // Warning: Image layers are not supported.
                
                /// Suitcases
                let suitcases = NSMutableAttributedString(string: "Suitcases")
                suitcases.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: suitcases.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    suitcases.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: suitcases.length))
                }
                context.saveGState()
                suitcases.draw(in: CGRect(x: 1, y: 387, width: 149, height: 24))
                context.restoreGState()
                
                /// Mel B
                let melB = NSMutableAttributedString(string: "Mel B")
                melB.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 12)!, range: NSRange(location: 0, length: melB.length))
                melB.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: melB.length))
                melB.addAttribute(NSKernAttributeName, value: 0.26, range: NSRange(location: 0, length: melB.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    melB.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: melB.length))
                }
                context.saveGState()
                melB.draw(in: CGRect(x: 0, y: 370, width: 149, height: 16))
                context.restoreGState()
                
                /// Fashion
                let fashion = NSMutableAttributedString(string: "Fashion")
                fashion.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: fashion.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    fashion.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: fashion.length))
                }
                context.saveGState()
                fashion.draw(in: CGRect(x: 153, y: 384, width: 149, height: 24))
                context.restoreGState()
                
                /// Michelle Keegan
                let michelleKeegan = NSMutableAttributedString(string: "Michelle Keegan")
                michelleKeegan.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 12)!, range: NSRange(location: 0, length: michelleKeegan.length))
                michelleKeegan.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: michelleKeegan.length))
                michelleKeegan.addAttribute(NSKernAttributeName, value: 0.26, range: NSRange(location: 0, length: michelleKeegan.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    michelleKeegan.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: michelleKeegan.length))
                }
                context.saveGState()
                michelleKeegan.draw(in: CGRect(x: 157, y: 370, width: 149, height: 16))
                context.restoreGState()
                
                /// Bitmap
                // Warning: Image layers are not supported.
                
                context.restoreGState()
            }
            
            /// Add your character o
            let addYourCharacterO = NSMutableAttributedString(string: "Add your character\non fabulous gifts")
            addYourCharacterO.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 22)!, range: NSRange(location: 0, length: addYourCharacterO.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 29
                paragraphStyle.minimumLineHeight = 29
                addYourCharacterO.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: addYourCharacterO.length))
            }
            context.saveGState()
            addYourCharacterO.draw(in: CGRect(x: 64, y: 318, width: 322, height: 64))
            context.restoreGState()
            
            /// Rectangle 14
            let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 240, height: 48), cornerRadius: 21)
            context.saveGState()
            context.translateBy(x: 104, y: 391)
            UIColor.white.setFill()
            rectangle17.fill()
            context.saveGState()
            rectangle17.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle17.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setStroke()
            rectangle17.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// View Collection
            let viewCollection = NSMutableAttributedString(string: "View Collection")
            viewCollection.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: viewCollection.length))
            viewCollection.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: viewCollection.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                viewCollection.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: viewCollection.length))
            }
            context.saveGState()
            viewCollection.draw(in: CGRect(x: 64, y: 404, width: 320, height: 24))
            context.restoreGState()
            
            /// Rectangle 14
            let rectangle18 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 240, height: 48), cornerRadius: 21)
            context.saveGState()
            context.translateBy(x: 104, y: 905)
            UIColor.white.setFill()
            rectangle18.fill()
            context.saveGState()
            rectangle18.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle18.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setStroke()
            rectangle18.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// View All Collections
            let viewAllCollections = NSMutableAttributedString(string: "View All Collections")
            viewAllCollections.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: viewAllCollections.length))
            viewAllCollections.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: viewAllCollections.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                viewAllCollections.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: viewAllCollections.length))
            }
            context.saveGState()
            viewAllCollections.draw(in: CGRect(x: 64, y: 918, width: 320, height: 24))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// PLACEHOLDER - Filters Tile
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 897)
            
            /// Rectangle 13
            let rectangle13 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 320, height: 128))
            context.saveGState()
            context.translateBy(x: 0, y: 22.4)
            UIColor(hue: 0.855, saturation: 0.356, brightness: 0.925, alpha: 1).setFill()
            rectangle13.fill()
            context.restoreGState()
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            /// Rectangle 4 Copy
            let rectangle4Copy2 = UIBezierPath()
            rectangle4Copy2.move(to: CGPoint(x: 0, y: 0.4))
            rectangle4Copy2.addLine(to: CGPoint(x: 159.75, y: 0))
            rectangle4Copy2.addLine(to: CGPoint(x: 159.75, y: 50))
            rectangle4Copy2.addLine(to: CGPoint(x: 0, y: 50.4))
            rectangle4Copy2.addLine(to: CGPoint(x: 0, y: 0.4))
            rectangle4Copy2.close()
            rectangle4Copy2.move(to: CGPoint(x: 0, y: 0.4))
            context.saveGState()
            context.translateBy(x: 222.08, y: 104.35)
            context.rotate(by: 363 * CGFloat.pi/180)
            context.translateBy(x: -79.88, y: -25.2)
            rectangle4Copy2.usesEvenOddFillRule = true
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setFill()
            rectangle4Copy2.fill()
            context.restoreGState()
            
            /// Filters
            let filters = NSMutableAttributedString(string: "Filters")
            filters.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 35)!, range: NSRange(location: 0, length: filters.length))
            filters.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.145, saturation: 0.503, brightness: 0.993, alpha: 1), range: NSRange(location: 0, length: filters.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 50.4
                paragraphStyle.minimumLineHeight = 50.4
                filters.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: filters.length))
            }
            context.saveGState()
            filters.draw(in: CGRect(x: 63, y: 76, width: 320, height: 56))
            context.restoreGState()
            
            /// Personalised
            let personalised = NSMutableAttributedString(string: "Personalised")
            personalised.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: personalised.length))
            personalised.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: personalised.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 50.4
                paragraphStyle.minimumLineHeight = 50.4
                personalised.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: personalised.length))
            }
            context.saveGState()
            personalised.draw(in: CGRect(x: 142, y: 34, width: 181, height: 56))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Coming Soon
        let comingSoon = NSMutableAttributedString(string: "Coming Soon")
        comingSoon.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 19)!, range: NSRange(location: 0, length: comingSoon.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            comingSoon.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: comingSoon.length))
        }
        context.saveGState()
        comingSoon.draw(in: CGRect(x: 0, y: 874, width: 322, height: 26))
        context.restoreGState()
        /// PLACEHOLDER - Emoji's Tile
        do {
            context.saveGState()
            context.translateBy(x: -64, y: 487)
            
            /// Rectangle 11
            let rectangle11 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 447, height: 374))
            context.saveGState()
            context.translateBy(x: 0, y: 3)
            UIColor(hue: 0.527, saturation: 0.591, brightness: 0.929, alpha: 1).setFill()
            rectangle11.fill()
            context.restoreGState()
            
            /// Oval 2
            let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 214, height: 214))
            context.saveGState()
            context.translateBy(x: 62, y: 22)
            // Warning: Blur effects are not supported.
            context.saveGState()
            oval2.addClip()
            context.translateBy(x: 106.91, y: 99.08)
            context.rotate(by: -0.07)
            context.scaleBy(x: 1.05, y: 1)
            context.drawRadialGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.527, saturation: 0.591, brightness: 0.929, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.591, brightness: 0.929, alpha: 1).cgColor,
                        UIColor(hue: 0.144, saturation: 0.023, brightness: 0.978, alpha: 0.03).cgColor,
                        UIColor(white: 0.979, alpha: 0).cgColor,
                    ] as CFArray, locations: [0, 0.29, 1, 1])!,
                startCenter: CGPoint.zero, startRadius: 0,
                endCenter: CGPoint.zero, endRadius: 118.14,
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            /// IMG_7716
            // Warning: Image layers are not supported.
            
            /// Rectangle 14
            let rectangle19 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 240, height: 48), cornerRadius: 21)
            context.saveGState()
            context.translateBy(x: 104, y: 311.4)
            UIColor.white.setFill()
            rectangle19.fill()
            context.saveGState()
            rectangle19.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle19.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setStroke()
            rectangle19.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Create Yours
            let createYours = NSMutableAttributedString(string: "Create Yours")
            createYours.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: createYours.length))
            createYours.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: createYours.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                createYours.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: createYours.length))
            }
            context.saveGState()
            createYours.draw(in: CGRect(x: 64, y: 323.4, width: 320, height: 24))
            context.restoreGState()
            
            /// claireabella-facial-expressions
            // Warning: Image layers are not supported.
            
            /// claireabella-facial-expressions
            // Warning: Image layers are not supported.
            
            /// claireabella-facial-expressions
            // Warning: Image layers are not supported.
            
            /// Star
            let star = UIBezierPath()
            star.move(to: CGPoint(x: 13.5, y: 21.29))
            star.addLine(to: CGPoint(x: 5.16, y: 25.68))
            star.addLine(to: CGPoint(x: 6.75, y: 16.39))
            star.addLine(to: CGPoint(x: 0, y: 9.81))
            star.addLine(to: CGPoint(x: 9.33, y: 8.45))
            star.addLine(to: CGPoint(x: 13.5, y: 0))
            star.addLine(to: CGPoint(x: 17.67, y: 8.45))
            star.addLine(to: CGPoint(x: 27, y: 9.81))
            star.addLine(to: CGPoint(x: 20.25, y: 16.39))
            star.addLine(to: CGPoint(x: 21.84, y: 25.68))
            star.addLine(to: CGPoint(x: 13.5, y: 21.29))
            star.close()
            star.move(to: CGPoint(x: 13.5, y: 21.29))
            context.saveGState()
            context.translateBy(x: 79, y: 243)
            UIColor(hue: 0.154, saturation: 0.887, brightness: 0.971, alpha: 1).setFill()
            star.fill()
            context.saveGState()
            star.lineWidth = 4.4
            context.beginPath()
            context.addPath(star.cgPath)
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            star.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Star
            let star2 = UIBezierPath()
            star2.move(to: CGPoint(x: 9.82, y: 15.49))
            star2.addLine(to: CGPoint(x: 3.75, y: 18.68))
            star2.addLine(to: CGPoint(x: 4.91, y: 11.92))
            star2.addLine(to: CGPoint(x: 0, y: 7.13))
            star2.addLine(to: CGPoint(x: 6.79, y: 6.15))
            star2.addLine(to: CGPoint(x: 9.82, y: 0))
            star2.addLine(to: CGPoint(x: 12.85, y: 6.15))
            star2.addLine(to: CGPoint(x: 19.64, y: 7.13))
            star2.addLine(to: CGPoint(x: 14.73, y: 11.92))
            star2.addLine(to: CGPoint(x: 15.89, y: 18.68))
            star2.addLine(to: CGPoint(x: 9.82, y: 15.49))
            star2.close()
            star2.move(to: CGPoint(x: 9.82, y: 15.49))
            context.saveGState()
            context.translateBy(x: 344, y: 18)
            UIColor(hue: 0.154, saturation: 0.887, brightness: 0.971, alpha: 1).setFill()
            star2.fill()
            context.saveGState()
            star2.lineWidth = 2.4
            context.beginPath()
            context.addPath(star2.cgPath)
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            star2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4 Copy
            let rectangle4Copy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 240, height: 50))
            context.saveGState()
            context.translateBy(x: 224.14, y: 232.25)
            context.rotate(by: 363 * CGFloat.pi/180)
            context.translateBy(x: -120, y: -25)
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setFill()
            rectangle4Copy3.fill()
            context.restoreGState()
            
            /// Fun Emoji’s
            let funEmojis = NSMutableAttributedString(string: "Fun Emoji’s")
            funEmojis.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 35)!, range: NSRange(location: 0, length: 3))
            funEmojis.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 35)!, range: NSRange(location: 3, length: 8))
            funEmojis.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: 3))
            funEmojis.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.527, saturation: 0.591, brightness: 0.929, alpha: 1), range: NSRange(location: 3, length: 1))
            funEmojis.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.145, saturation: 0.503, brightness: 0.993, alpha: 1), range: NSRange(location: 4, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 50.4
                paragraphStyle.minimumLineHeight = 50.4
                funEmojis.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: funEmojis.length))
            }
            context.saveGState()
            funEmojis.draw(in: CGRect(x: 64, y: 204, width: 320, height: 56))
            context.restoreGState()
            
            /// Personalised to look
            let personalisedToLook = NSMutableAttributedString(string: "Personalised to look like you!")
            personalisedToLook.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: personalisedToLook.length))
            personalisedToLook.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: personalisedToLook.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 50.4
                paragraphStyle.minimumLineHeight = 50.4
                personalisedToLook.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: personalisedToLook.length))
            }
            context.saveGState()
            personalisedToLook.draw(in: CGRect(x: 64, y: 255.4, width: 322, height: 56))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// PLACEHOLDER - Create Character Tile
        do {
            context.saveGState()
            context.translateBy(x: -35, y: 63)
            
            /// Rectangle 15
            let rectangle20 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 365, height: 242.79))
            context.saveGState()
            context.translateBy(x: 9, y: 0)
            UIColor(hue: 0.547, saturation: 0.675, brightness: 0.918, alpha: 1).setFill()
            rectangle20.fill()
            context.restoreGState()
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            /// Star
            let star3 = UIBezierPath()
            star3.move(to: CGPoint(x: 8.56, y: 13.5))
            star3.addLine(to: CGPoint(x: 3.27, y: 16.28))
            star3.addLine(to: CGPoint(x: 4.28, y: 10.39))
            star3.addLine(to: CGPoint(x: 0, y: 6.22))
            star3.addLine(to: CGPoint(x: 5.91, y: 5.36))
            star3.addLine(to: CGPoint(x: 8.56, y: 0))
            star3.addLine(to: CGPoint(x: 11.2, y: 5.36))
            star3.addLine(to: CGPoint(x: 17.12, y: 6.22))
            star3.addLine(to: CGPoint(x: 12.84, y: 10.39))
            star3.addLine(to: CGPoint(x: 13.85, y: 16.28))
            star3.addLine(to: CGPoint(x: 8.56, y: 13.5))
            star3.close()
            star3.move(to: CGPoint(x: 8.56, y: 13.5))
            context.saveGState()
            context.translateBy(x: 102, y: 24)
            UIColor(hue: 0.154, saturation: 0.887, brightness: 0.971, alpha: 1).setFill()
            star3.fill()
            star3.lineWidth = 1
            UIColor.black.setStroke()
            star3.stroke()
            context.restoreGState()
            
            /// Rectangle 4 Copy
            let rectangle4Copy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 260, height: 50))
            context.saveGState()
            context.translateBy(x: 65, y: 56)
            UIColor(hue: 0.143, saturation: 0.433, brightness: 0.996, alpha: 1).setFill()
            rectangle4Copy4.fill()
            context.restoreGState()
            
            /// Rectangle 4 Copy
            let rectangle4Copy5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 204.44, height: 39))
            context.saveGState()
            context.translateBy(x: 202.22, y: 32.5)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -102.22, y: -19.5)
            UIColor(hue: 0.143, saturation: 0.433, brightness: 0.996, alpha: 1).setFill()
            rectangle4Copy5.fill()
            context.restoreGState()
            
            /// Create your first
            let createYourFirst = NSMutableAttributedString(string: "Create your first")
            createYourFirst.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 20.4)!, range: NSRange(location: 0, length: createYourFirst.length))
            createYourFirst.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: createYourFirst.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                createYourFirst.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: createYourFirst.length))
            }
            context.saveGState()
            createYourFirst.draw(in: CGRect(x: 35, y: 20, width: 325, height: 28))
            context.restoreGState()
            
            /// Character
            let character = NSMutableAttributedString(string: "Character")
            character.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 38.4)!, range: NSRange(location: 0, length: character.length))
            character.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: character.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 50.4
                paragraphStyle.minimumLineHeight = 50.4
                character.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: character.length))
            }
            context.saveGState()
            character.draw(in: CGRect(x: 0, y: 54, width: 386, height: 56))
            context.restoreGState()
            
            /// Rectangle 14
            let rectangle21 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 240, height: 48), cornerRadius: 21)
            context.saveGState()
            context.translateBy(x: 75, y: 114)
            UIColor.white.setFill()
            rectangle21.fill()
            context.saveGState()
            rectangle21.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle21.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setStroke()
            rectangle21.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Start Now
            let startNow = NSMutableAttributedString(string: "Start Now")
            startNow.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 18)!, range: NSRange(location: 0, length: startNow.length))
            startNow.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1), range: NSRange(location: 0, length: startNow.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                startNow.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: startNow.length))
            }
            context.saveGState()
            startNow.draw(in: CGRect(x: 35, y: 127, width: 320, height: 24))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Get Creative With Yo
        let getCreativeWithYo = NSMutableAttributedString(string: "Get Creative With\nYour Characters")
        getCreativeWithYo.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 19)!, range: NSRange(location: 0, length: getCreativeWithYo.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            getCreativeWithYo.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: getCreativeWithYo.length))
        }
        context.saveGState()
        getCreativeWithYo.draw(in: CGRect(x: 0, y: 422, width: 322, height: 51))
        context.restoreGState()
        /// Footer Nav / - home no character
        // Warning: New symbols are not supported.
        /// Top Bar
        do {
            context.saveGState()
            context.translateBy(x: 0, y: -4)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 322, height: 64))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -2, dy: -3))
            context.clip(using: .evenOdd)
            context.translateBy(x: -325, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 325, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.881, saturation: 0.147, brightness: 0.825, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            UIColor(hue: 0.887, saturation: 0.929, brightness: 0.878, alpha: 1).setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// ClaireaBella
            let claireaBella = NSMutableAttributedString(string: "ClaireaBella")
            claireaBella.addAttribute(NSFontAttributeName, value: UIFont(name: "Arial", size: 16)!, range: NSRange(location: 0, length: claireaBella.length))
            claireaBella.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: claireaBella.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                claireaBella.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: claireaBella.length))
            }
            context.saveGState()
            claireaBella.draw(in: CGRect(x: 0, y: 37, width: 320, height: 21))
            context.restoreGState()
            
            /// STATUS_BAR
            do {
                context.saveGState()
                context.translateBy(x: 6, y: 4)
                
                /// Mobile Signal
                let mobileSignal = UIBezierPath()
                mobileSignal.move(to: CGPoint(x: 2.24, y: 4.49))
                mobileSignal.addCurve(to: CGPoint(x: 0, y: 2.25), controlPoint1: CGPoint(x: 1, y: 4.49), controlPoint2: CGPoint(x: 0, y: 3.49))
                mobileSignal.addCurve(to: CGPoint(x: 2.24, y: 0), controlPoint1: CGPoint(x: 0, y: 1.01), controlPoint2: CGPoint(x: 1, y: 0))
                mobileSignal.addCurve(to: CGPoint(x: 4.49, y: 2.25), controlPoint1: CGPoint(x: 3.48, y: 0), controlPoint2: CGPoint(x: 4.49, y: 1.01))
                mobileSignal.addCurve(to: CGPoint(x: 2.24, y: 4.49), controlPoint1: CGPoint(x: 4.49, y: 3.49), controlPoint2: CGPoint(x: 3.48, y: 4.49))
                mobileSignal.close()
                mobileSignal.move(to: CGPoint(x: 7.96, y: 4.49))
                mobileSignal.addCurve(to: CGPoint(x: 5.71, y: 2.25), controlPoint1: CGPoint(x: 6.72, y: 4.49), controlPoint2: CGPoint(x: 5.71, y: 3.49))
                mobileSignal.addCurve(to: CGPoint(x: 7.96, y: 0), controlPoint1: CGPoint(x: 5.71, y: 1.01), controlPoint2: CGPoint(x: 6.72, y: 0))
                mobileSignal.addCurve(to: CGPoint(x: 10.2, y: 2.25), controlPoint1: CGPoint(x: 9.2, y: 0), controlPoint2: CGPoint(x: 10.2, y: 1.01))
                mobileSignal.addCurve(to: CGPoint(x: 7.96, y: 4.49), controlPoint1: CGPoint(x: 10.2, y: 3.49), controlPoint2: CGPoint(x: 9.2, y: 4.49))
                mobileSignal.close()
                mobileSignal.move(to: CGPoint(x: 13.67, y: 4.49))
                mobileSignal.addCurve(to: CGPoint(x: 11.42, y: 2.25), controlPoint1: CGPoint(x: 12.43, y: 4.49), controlPoint2: CGPoint(x: 11.42, y: 3.49))
                mobileSignal.addCurve(to: CGPoint(x: 13.67, y: 0), controlPoint1: CGPoint(x: 11.42, y: 1.01), controlPoint2: CGPoint(x: 12.43, y: 0))
                mobileSignal.addCurve(to: CGPoint(x: 15.91, y: 2.25), controlPoint1: CGPoint(x: 14.91, y: 0), controlPoint2: CGPoint(x: 15.91, y: 1.01))
                mobileSignal.addCurve(to: CGPoint(x: 13.67, y: 4.49), controlPoint1: CGPoint(x: 15.91, y: 3.49), controlPoint2: CGPoint(x: 14.91, y: 4.49))
                mobileSignal.close()
                mobileSignal.move(to: CGPoint(x: 19.38, y: 4.49))
                mobileSignal.addCurve(to: CGPoint(x: 17.14, y: 2.25), controlPoint1: CGPoint(x: 18.14, y: 4.49), controlPoint2: CGPoint(x: 17.14, y: 3.49))
                mobileSignal.addCurve(to: CGPoint(x: 19.38, y: 0), controlPoint1: CGPoint(x: 17.14, y: 1.01), controlPoint2: CGPoint(x: 18.14, y: 0))
                mobileSignal.addCurve(to: CGPoint(x: 21.62, y: 2.25), controlPoint1: CGPoint(x: 20.62, y: 0), controlPoint2: CGPoint(x: 21.62, y: 1.01))
                mobileSignal.addCurve(to: CGPoint(x: 19.38, y: 4.49), controlPoint1: CGPoint(x: 21.62, y: 3.49), controlPoint2: CGPoint(x: 20.62, y: 4.49))
                mobileSignal.close()
                mobileSignal.move(to: CGPoint(x: 19.38, y: 4.08))
                mobileSignal.addCurve(to: CGPoint(x: 21.22, y: 2.25), controlPoint1: CGPoint(x: 20.39, y: 4.08), controlPoint2: CGPoint(x: 21.22, y: 3.26))
                mobileSignal.addCurve(to: CGPoint(x: 19.38, y: 0.41), controlPoint1: CGPoint(x: 21.22, y: 1.23), controlPoint2: CGPoint(x: 20.39, y: 0.41))
                mobileSignal.addCurve(to: CGPoint(x: 17.54, y: 2.25), controlPoint1: CGPoint(x: 18.37, y: 0.41), controlPoint2: CGPoint(x: 17.54, y: 1.23))
                mobileSignal.addCurve(to: CGPoint(x: 19.38, y: 4.08), controlPoint1: CGPoint(x: 17.54, y: 3.26), controlPoint2: CGPoint(x: 18.37, y: 4.08))
                mobileSignal.close()
                mobileSignal.move(to: CGPoint(x: 25.09, y: 4.49))
                mobileSignal.addCurve(to: CGPoint(x: 22.85, y: 2.25), controlPoint1: CGPoint(x: 23.85, y: 4.49), controlPoint2: CGPoint(x: 22.85, y: 3.49))
                mobileSignal.addCurve(to: CGPoint(x: 25.09, y: 0), controlPoint1: CGPoint(x: 22.85, y: 1.01), controlPoint2: CGPoint(x: 23.85, y: 0))
                mobileSignal.addCurve(to: CGPoint(x: 27.34, y: 2.25), controlPoint1: CGPoint(x: 26.33, y: 0), controlPoint2: CGPoint(x: 27.34, y: 1.01))
                mobileSignal.addCurve(to: CGPoint(x: 25.09, y: 4.49), controlPoint1: CGPoint(x: 27.34, y: 3.49), controlPoint2: CGPoint(x: 26.33, y: 4.49))
                mobileSignal.close()
                mobileSignal.move(to: CGPoint(x: 25.09, y: 4.08))
                mobileSignal.addCurve(to: CGPoint(x: 26.93, y: 2.25), controlPoint1: CGPoint(x: 26.11, y: 4.08), controlPoint2: CGPoint(x: 26.93, y: 3.26))
                mobileSignal.addCurve(to: CGPoint(x: 25.09, y: 0.41), controlPoint1: CGPoint(x: 26.93, y: 1.23), controlPoint2: CGPoint(x: 26.11, y: 0.41))
                mobileSignal.addCurve(to: CGPoint(x: 23.26, y: 2.25), controlPoint1: CGPoint(x: 24.08, y: 0.41), controlPoint2: CGPoint(x: 23.26, y: 1.23))
                mobileSignal.addCurve(to: CGPoint(x: 25.09, y: 4.08), controlPoint1: CGPoint(x: 23.26, y: 3.26), controlPoint2: CGPoint(x: 24.08, y: 4.08))
                mobileSignal.close()
                mobileSignal.move(to: CGPoint(x: 25.09, y: 4.08))
                context.saveGState()
                context.translateBy(x: 5.3, y: 6.13)
                mobileSignal.usesEvenOddFillRule = true
                UIColor.white.setFill()
                mobileSignal.fill()
                context.restoreGState()
                
                /// Carrier
                let carrier = UIBezierPath()
                carrier.move(to: CGPoint(x: 0, y: 7.21))
                carrier.addLine(to: CGPoint(x: 0, y: 0.3))
                carrier.addLine(to: CGPoint(x: 4.19, y: 0.3))
                carrier.addLine(to: CGPoint(x: 4.19, y: 1.08))
                carrier.addLine(to: CGPoint(x: 0.86, y: 1.08))
                carrier.addLine(to: CGPoint(x: 0.86, y: 3.45))
                carrier.addLine(to: CGPoint(x: 3.92, y: 3.45))
                carrier.addLine(to: CGPoint(x: 3.92, y: 4.22))
                carrier.addLine(to: CGPoint(x: 0.86, y: 4.22))
                carrier.addLine(to: CGPoint(x: 0.86, y: 7.21))
                carrier.addLine(to: CGPoint(x: 0, y: 7.21))
                carrier.close()
                carrier.move(to: CGPoint(x: 7.17, y: 7.26))
                carrier.addCurve(to: CGPoint(x: 6.19, y: 7.07), controlPoint1: CGPoint(x: 6.81, y: 7.26), controlPoint2: CGPoint(x: 6.48, y: 7.19))
                carrier.addCurve(to: CGPoint(x: 5.44, y: 6.54), controlPoint1: CGPoint(x: 5.9, y: 6.94), controlPoint2: CGPoint(x: 5.65, y: 6.77))
                carrier.addCurve(to: CGPoint(x: 4.96, y: 5.71), controlPoint1: CGPoint(x: 5.23, y: 6.31), controlPoint2: CGPoint(x: 5.07, y: 6.04))
                carrier.addCurve(to: CGPoint(x: 4.8, y: 4.63), controlPoint1: CGPoint(x: 4.85, y: 5.39), controlPoint2: CGPoint(x: 4.8, y: 5.03))
                carrier.addCurve(to: CGPoint(x: 4.96, y: 3.54), controlPoint1: CGPoint(x: 4.8, y: 4.23), controlPoint2: CGPoint(x: 4.85, y: 3.86))
                carrier.addCurve(to: CGPoint(x: 5.44, y: 2.71), controlPoint1: CGPoint(x: 5.07, y: 3.22), controlPoint2: CGPoint(x: 5.23, y: 2.94))
                carrier.addCurve(to: CGPoint(x: 6.19, y: 2.18), controlPoint1: CGPoint(x: 5.65, y: 2.48), controlPoint2: CGPoint(x: 5.9, y: 2.31))
                carrier.addCurve(to: CGPoint(x: 7.17, y: 2), controlPoint1: CGPoint(x: 6.48, y: 2.06), controlPoint2: CGPoint(x: 6.81, y: 2))
                carrier.addCurve(to: CGPoint(x: 8.15, y: 2.18), controlPoint1: CGPoint(x: 7.54, y: 2), controlPoint2: CGPoint(x: 7.86, y: 2.06))
                carrier.addCurve(to: CGPoint(x: 8.9, y: 2.71), controlPoint1: CGPoint(x: 8.45, y: 2.31), controlPoint2: CGPoint(x: 8.7, y: 2.48))
                carrier.addCurve(to: CGPoint(x: 9.38, y: 3.54), controlPoint1: CGPoint(x: 9.11, y: 2.94), controlPoint2: CGPoint(x: 9.27, y: 3.22))
                carrier.addCurve(to: CGPoint(x: 9.55, y: 4.63), controlPoint1: CGPoint(x: 9.49, y: 3.86), controlPoint2: CGPoint(x: 9.55, y: 4.23))
                carrier.addCurve(to: CGPoint(x: 9.38, y: 5.71), controlPoint1: CGPoint(x: 9.55, y: 5.03), controlPoint2: CGPoint(x: 9.49, y: 5.39))
                carrier.addCurve(to: CGPoint(x: 8.9, y: 6.54), controlPoint1: CGPoint(x: 9.27, y: 6.04), controlPoint2: CGPoint(x: 9.11, y: 6.31))
                carrier.addCurve(to: CGPoint(x: 8.15, y: 7.07), controlPoint1: CGPoint(x: 8.7, y: 6.77), controlPoint2: CGPoint(x: 8.45, y: 6.94))
                carrier.addCurve(to: CGPoint(x: 7.17, y: 7.26), controlPoint1: CGPoint(x: 7.86, y: 7.19), controlPoint2: CGPoint(x: 7.54, y: 7.26))
                carrier.addLine(to: CGPoint(x: 7.17, y: 7.26))
                carrier.close()
                carrier.move(to: CGPoint(x: 7.17, y: 6.51))
                carrier.addCurve(to: CGPoint(x: 7.82, y: 6.38), controlPoint1: CGPoint(x: 7.41, y: 6.51), controlPoint2: CGPoint(x: 7.63, y: 6.47))
                carrier.addCurve(to: CGPoint(x: 8.3, y: 6.01), controlPoint1: CGPoint(x: 8, y: 6.3), controlPoint2: CGPoint(x: 8.17, y: 6.17))
                carrier.addCurve(to: CGPoint(x: 8.6, y: 5.42), controlPoint1: CGPoint(x: 8.43, y: 5.85), controlPoint2: CGPoint(x: 8.53, y: 5.66))
                carrier.addCurve(to: CGPoint(x: 8.7, y: 4.63), controlPoint1: CGPoint(x: 8.67, y: 5.19), controlPoint2: CGPoint(x: 8.7, y: 4.92))
                carrier.addCurve(to: CGPoint(x: 8.6, y: 3.83), controlPoint1: CGPoint(x: 8.7, y: 4.33), controlPoint2: CGPoint(x: 8.67, y: 4.07))
                carrier.addCurve(to: CGPoint(x: 8.3, y: 3.24), controlPoint1: CGPoint(x: 8.53, y: 3.6), controlPoint2: CGPoint(x: 8.43, y: 3.4))
                carrier.addCurve(to: CGPoint(x: 7.82, y: 2.87), controlPoint1: CGPoint(x: 8.17, y: 3.08), controlPoint2: CGPoint(x: 8, y: 2.95))
                carrier.addCurve(to: CGPoint(x: 7.17, y: 2.74), controlPoint1: CGPoint(x: 7.63, y: 2.78), controlPoint2: CGPoint(x: 7.41, y: 2.74))
                carrier.addCurve(to: CGPoint(x: 6.53, y: 2.87), controlPoint1: CGPoint(x: 6.93, y: 2.74), controlPoint2: CGPoint(x: 6.72, y: 2.79))
                carrier.addCurve(to: CGPoint(x: 6.05, y: 3.24), controlPoint1: CGPoint(x: 6.34, y: 2.96), controlPoint2: CGPoint(x: 6.18, y: 3.08))
                carrier.addCurve(to: CGPoint(x: 5.74, y: 3.83), controlPoint1: CGPoint(x: 5.91, y: 3.4), controlPoint2: CGPoint(x: 5.81, y: 3.6))
                carrier.addCurve(to: CGPoint(x: 5.64, y: 4.63), controlPoint1: CGPoint(x: 5.68, y: 4.07), controlPoint2: CGPoint(x: 5.64, y: 4.33))
                carrier.addCurve(to: CGPoint(x: 5.75, y: 5.42), controlPoint1: CGPoint(x: 5.64, y: 4.92), controlPoint2: CGPoint(x: 5.68, y: 5.19))
                carrier.addCurve(to: CGPoint(x: 6.05, y: 6.01), controlPoint1: CGPoint(x: 5.82, y: 5.66), controlPoint2: CGPoint(x: 5.92, y: 5.85))
                carrier.addCurve(to: CGPoint(x: 6.53, y: 6.38), controlPoint1: CGPoint(x: 6.18, y: 6.17), controlPoint2: CGPoint(x: 6.34, y: 6.3))
                carrier.addCurve(to: CGPoint(x: 7.17, y: 6.51), controlPoint1: CGPoint(x: 6.72, y: 6.47), controlPoint2: CGPoint(x: 6.93, y: 6.51))
                carrier.addLine(to: CGPoint(x: 7.17, y: 6.51))
                carrier.close()
                carrier.move(to: CGPoint(x: 10.55, y: 0))
                carrier.addLine(to: CGPoint(x: 11.38, y: 0))
                carrier.addLine(to: CGPoint(x: 11.38, y: 7.21))
                carrier.addLine(to: CGPoint(x: 10.55, y: 7.21))
                carrier.addLine(to: CGPoint(x: 10.55, y: 0))
                carrier.close()
                carrier.move(to: CGPoint(x: 10.55, y: 0))
                context.saveGState()
                context.translateBy(x: 36.57, y: 4.64)
                carrier.usesEvenOddFillRule = true
                UIColor.white.setFill()
                carrier.fill()
                context.restoreGState()
                
                /// Wi-Fi
                let wiFi = UIBezierPath()
                wiFi.move(to: CGPoint(x: 7.05, y: 5.67))
                wiFi.addLine(to: CGPoint(x: 5.32, y: 7.35))
                wiFi.addLine(to: CGPoint(x: 3.56, y: 5.64))
                wiFi.addCurve(to: CGPoint(x: 5.29, y: 4.88), controlPoint1: CGPoint(x: 3.98, y: 5.17), controlPoint2: CGPoint(x: 4.6, y: 4.88))
                wiFi.addCurve(to: CGPoint(x: 7.05, y: 5.67), controlPoint1: CGPoint(x: 6, y: 4.88), controlPoint2: CGPoint(x: 6.63, y: 5.18))
                wiFi.close()
                wiFi.move(to: CGPoint(x: 8.83, y: 3.94))
                wiFi.addLine(to: CGPoint(x: 8.83, y: 3.94))
                wiFi.addLine(to: CGPoint(x: 7.94, y: 4.8))
                wiFi.addCurve(to: CGPoint(x: 5.29, y: 3.66), controlPoint1: CGPoint(x: 7.29, y: 4.1), controlPoint2: CGPoint(x: 6.35, y: 3.66))
                wiFi.addCurve(to: CGPoint(x: 2.67, y: 4.78), controlPoint1: CGPoint(x: 4.25, y: 3.66), controlPoint2: CGPoint(x: 3.32, y: 4.09))
                wiFi.addLine(to: CGPoint(x: 1.78, y: 3.91))
                wiFi.addCurve(to: CGPoint(x: 5.29, y: 2.44), controlPoint1: CGPoint(x: 2.66, y: 3.01), controlPoint2: CGPoint(x: 3.91, y: 2.44))
                wiFi.addCurve(to: CGPoint(x: 8.83, y: 3.94), controlPoint1: CGPoint(x: 6.69, y: 2.44), controlPoint2: CGPoint(x: 7.95, y: 3.02))
                wiFi.close()
                wiFi.move(to: CGPoint(x: 10.61, y: 2.21))
                wiFi.addLine(to: CGPoint(x: 9.72, y: 3.07))
                wiFi.addCurve(to: CGPoint(x: 5.29, y: 1.22), controlPoint1: CGPoint(x: 8.61, y: 1.93), controlPoint2: CGPoint(x: 7.04, y: 1.22))
                wiFi.addCurve(to: CGPoint(x: 0.89, y: 3.05), controlPoint1: CGPoint(x: 3.56, y: 1.22), controlPoint2: CGPoint(x: 2, y: 1.92))
                wiFi.addLine(to: CGPoint(x: 0, y: 2.19))
                wiFi.addCurve(to: CGPoint(x: 5.29, y: 0), controlPoint1: CGPoint(x: 1.33, y: 0.84), controlPoint2: CGPoint(x: 3.21, y: 0))
                wiFi.addCurve(to: CGPoint(x: 10.61, y: 2.21), controlPoint1: CGPoint(x: 7.39, y: 0), controlPoint2: CGPoint(x: 9.27, y: 0.85))
                wiFi.close()
                wiFi.move(to: CGPoint(x: 10.61, y: 2.21))
                context.saveGState()
                context.translateBy(x: 53.04, y: 4.49)
                wiFi.usesEvenOddFillRule = true
                UIColor.white.setFill()
                wiFi.fill()
                context.restoreGState()
                
                /// 9:41 AM
                let _941AM = UIBezierPath()
                _941AM.move(to: CGPoint(x: 2.39, y: 7.14))
                _941AM.addCurve(to: CGPoint(x: 1.57, y: 7.01), controlPoint1: CGPoint(x: 2.1, y: 7.14), controlPoint2: CGPoint(x: 1.82, y: 7.1))
                _941AM.addCurve(to: CGPoint(x: 0.88, y: 6.65), controlPoint1: CGPoint(x: 1.31, y: 6.93), controlPoint2: CGPoint(x: 1.08, y: 6.81))
                _941AM.addCurve(to: CGPoint(x: 0.38, y: 6.09), controlPoint1: CGPoint(x: 0.68, y: 6.5), controlPoint2: CGPoint(x: 0.52, y: 6.31))
                _941AM.addCurve(to: CGPoint(x: 0.1, y: 5.35), controlPoint1: CGPoint(x: 0.24, y: 5.87), controlPoint2: CGPoint(x: 0.15, y: 5.62))
                _941AM.addLine(to: CGPoint(x: 0.98, y: 5.35))
                _941AM.addCurve(to: CGPoint(x: 1.18, y: 5.78), controlPoint1: CGPoint(x: 1.02, y: 5.51), controlPoint2: CGPoint(x: 1.09, y: 5.65))
                _941AM.addCurve(to: CGPoint(x: 1.5, y: 6.1), controlPoint1: CGPoint(x: 1.27, y: 5.9), controlPoint2: CGPoint(x: 1.38, y: 6.01))
                _941AM.addCurve(to: CGPoint(x: 1.91, y: 6.32), controlPoint1: CGPoint(x: 1.63, y: 6.2), controlPoint2: CGPoint(x: 1.76, y: 6.27))
                _941AM.addCurve(to: CGPoint(x: 2.4, y: 6.39), controlPoint1: CGPoint(x: 2.07, y: 6.36), controlPoint2: CGPoint(x: 2.23, y: 6.39))
                _941AM.addCurve(to: CGPoint(x: 3.17, y: 6.2), controlPoint1: CGPoint(x: 2.69, y: 6.39), controlPoint2: CGPoint(x: 2.94, y: 6.33))
                _941AM.addCurve(to: CGPoint(x: 3.74, y: 5.64), controlPoint1: CGPoint(x: 3.39, y: 6.07), controlPoint2: CGPoint(x: 3.58, y: 5.88))
                _941AM.addCurve(to: CGPoint(x: 4.1, y: 4.74), controlPoint1: CGPoint(x: 3.89, y: 5.39), controlPoint2: CGPoint(x: 4.01, y: 5.09))
                _941AM.addCurve(to: CGPoint(x: 4.23, y: 3.51), controlPoint1: CGPoint(x: 4.18, y: 4.38), controlPoint2: CGPoint(x: 4.23, y: 3.97))
                _941AM.addLine(to: CGPoint(x: 4.23, y: 3.51))
                _941AM.addLine(to: CGPoint(x: 4.22, y: 3.51))
                _941AM.addCurve(to: CGPoint(x: 3.92, y: 3.98), controlPoint1: CGPoint(x: 4.14, y: 3.69), controlPoint2: CGPoint(x: 4.04, y: 3.84))
                _941AM.addCurve(to: CGPoint(x: 3.47, y: 4.33), controlPoint1: CGPoint(x: 3.79, y: 4.12), controlPoint2: CGPoint(x: 3.64, y: 4.24))
                _941AM.addCurve(to: CGPoint(x: 2.92, y: 4.56), controlPoint1: CGPoint(x: 3.31, y: 4.43), controlPoint2: CGPoint(x: 3.12, y: 4.51))
                _941AM.addCurve(to: CGPoint(x: 2.29, y: 4.64), controlPoint1: CGPoint(x: 2.72, y: 4.62), controlPoint2: CGPoint(x: 2.51, y: 4.64))
                _941AM.addCurve(to: CGPoint(x: 1.38, y: 4.47), controlPoint1: CGPoint(x: 1.96, y: 4.64), controlPoint2: CGPoint(x: 1.66, y: 4.59))
                _941AM.addCurve(to: CGPoint(x: 0.65, y: 3.99), controlPoint1: CGPoint(x: 1.1, y: 4.36), controlPoint2: CGPoint(x: 0.85, y: 4.2))
                _941AM.addCurve(to: CGPoint(x: 0.17, y: 3.27), controlPoint1: CGPoint(x: 0.45, y: 3.79), controlPoint2: CGPoint(x: 0.29, y: 3.55))
                _941AM.addCurve(to: CGPoint(x: 0, y: 2.36), controlPoint1: CGPoint(x: 0.06, y: 2.99), controlPoint2: CGPoint(x: 0, y: 2.69))
                _941AM.addCurve(to: CGPoint(x: 0.18, y: 1.41), controlPoint1: CGPoint(x: 0, y: 2.02), controlPoint2: CGPoint(x: 0.06, y: 1.7))
                _941AM.addCurve(to: CGPoint(x: 0.69, y: 0.67), controlPoint1: CGPoint(x: 0.3, y: 1.13), controlPoint2: CGPoint(x: 0.47, y: 0.88))
                _941AM.addCurve(to: CGPoint(x: 1.47, y: 0.18), controlPoint1: CGPoint(x: 0.91, y: 0.46), controlPoint2: CGPoint(x: 1.17, y: 0.3))
                _941AM.addCurve(to: CGPoint(x: 2.44, y: 0), controlPoint1: CGPoint(x: 1.76, y: 0.06), controlPoint2: CGPoint(x: 2.09, y: 0))
                _941AM.addCurve(to: CGPoint(x: 3.18, y: 0.1), controlPoint1: CGPoint(x: 2.7, y: 0), controlPoint2: CGPoint(x: 2.95, y: 0.03))
                _941AM.addCurve(to: CGPoint(x: 3.82, y: 0.4), controlPoint1: CGPoint(x: 3.41, y: 0.17), controlPoint2: CGPoint(x: 3.62, y: 0.27))
                _941AM.addCurve(to: CGPoint(x: 4.34, y: 0.89), controlPoint1: CGPoint(x: 4.01, y: 0.54), controlPoint2: CGPoint(x: 4.18, y: 0.7))
                _941AM.addCurve(to: CGPoint(x: 4.72, y: 1.55), controlPoint1: CGPoint(x: 4.49, y: 1.08), controlPoint2: CGPoint(x: 4.62, y: 1.3))
                _941AM.addCurve(to: CGPoint(x: 5.06, y: 3.46), controlPoint1: CGPoint(x: 4.95, y: 2.07), controlPoint2: CGPoint(x: 5.06, y: 2.71))
                _941AM.addCurve(to: CGPoint(x: 4.88, y: 5.01), controlPoint1: CGPoint(x: 5.06, y: 4.04), controlPoint2: CGPoint(x: 5, y: 4.55))
                _941AM.addCurve(to: CGPoint(x: 4.36, y: 6.17), controlPoint1: CGPoint(x: 4.76, y: 5.47), controlPoint2: CGPoint(x: 4.59, y: 5.85))
                _941AM.addCurve(to: CGPoint(x: 3.52, y: 6.89), controlPoint1: CGPoint(x: 4.13, y: 6.49), controlPoint2: CGPoint(x: 3.85, y: 6.73))
                _941AM.addCurve(to: CGPoint(x: 2.39, y: 7.14), controlPoint1: CGPoint(x: 3.19, y: 7.06), controlPoint2: CGPoint(x: 2.81, y: 7.14))
                _941AM.addLine(to: CGPoint(x: 2.39, y: 7.14))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 2.44, y: 3.89))
                _941AM.addCurve(to: CGPoint(x: 3.07, y: 3.77), controlPoint1: CGPoint(x: 2.67, y: 3.89), controlPoint2: CGPoint(x: 2.88, y: 3.85))
                _941AM.addCurve(to: CGPoint(x: 3.58, y: 3.45), controlPoint1: CGPoint(x: 3.27, y: 3.69), controlPoint2: CGPoint(x: 3.44, y: 3.59))
                _941AM.addCurve(to: CGPoint(x: 3.91, y: 2.96), controlPoint1: CGPoint(x: 3.72, y: 3.31), controlPoint2: CGPoint(x: 3.83, y: 3.15))
                _941AM.addCurve(to: CGPoint(x: 4.03, y: 2.35), controlPoint1: CGPoint(x: 3.99, y: 2.78), controlPoint2: CGPoint(x: 4.03, y: 2.57))
                _941AM.addCurve(to: CGPoint(x: 3.91, y: 1.73), controlPoint1: CGPoint(x: 4.03, y: 2.13), controlPoint2: CGPoint(x: 3.99, y: 1.93))
                _941AM.addCurve(to: CGPoint(x: 3.57, y: 1.23), controlPoint1: CGPoint(x: 3.83, y: 1.54), controlPoint2: CGPoint(x: 3.72, y: 1.37))
                _941AM.addCurve(to: CGPoint(x: 3.07, y: 0.9), controlPoint1: CGPoint(x: 3.43, y: 1.09), controlPoint2: CGPoint(x: 3.27, y: 0.98))
                _941AM.addCurve(to: CGPoint(x: 2.45, y: 0.78), controlPoint1: CGPoint(x: 2.88, y: 0.82), controlPoint2: CGPoint(x: 2.68, y: 0.78))
                _941AM.addCurve(to: CGPoint(x: 1.83, y: 0.9), controlPoint1: CGPoint(x: 2.23, y: 0.78), controlPoint2: CGPoint(x: 2.03, y: 0.82))
                _941AM.addCurve(to: CGPoint(x: 1.33, y: 1.23), controlPoint1: CGPoint(x: 1.64, y: 0.98), controlPoint2: CGPoint(x: 1.47, y: 1.09))
                _941AM.addCurve(to: CGPoint(x: 0.99, y: 1.72), controlPoint1: CGPoint(x: 1.19, y: 1.37), controlPoint2: CGPoint(x: 1.07, y: 1.53))
                _941AM.addCurve(to: CGPoint(x: 0.87, y: 2.33), controlPoint1: CGPoint(x: 0.91, y: 1.91), controlPoint2: CGPoint(x: 0.87, y: 2.11))
                _941AM.addCurve(to: CGPoint(x: 0.99, y: 2.96), controlPoint1: CGPoint(x: 0.87, y: 2.56), controlPoint2: CGPoint(x: 0.91, y: 2.77))
                _941AM.addCurve(to: CGPoint(x: 1.31, y: 3.45), controlPoint1: CGPoint(x: 1.07, y: 3.15), controlPoint2: CGPoint(x: 1.17, y: 3.31))
                _941AM.addCurve(to: CGPoint(x: 1.81, y: 3.77), controlPoint1: CGPoint(x: 1.46, y: 3.58), controlPoint2: CGPoint(x: 1.62, y: 3.69))
                _941AM.addCurve(to: CGPoint(x: 2.44, y: 3.89), controlPoint1: CGPoint(x: 2, y: 3.85), controlPoint2: CGPoint(x: 2.21, y: 3.89))
                _941AM.addLine(to: CGPoint(x: 2.44, y: 3.89))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 6.78, y: 7.07))
                _941AM.addCurve(to: CGPoint(x: 6.57, y: 7.03), controlPoint1: CGPoint(x: 6.71, y: 7.07), controlPoint2: CGPoint(x: 6.63, y: 7.06))
                _941AM.addCurve(to: CGPoint(x: 6.4, y: 6.92), controlPoint1: CGPoint(x: 6.5, y: 7), controlPoint2: CGPoint(x: 6.44, y: 6.96))
                _941AM.addCurve(to: CGPoint(x: 6.28, y: 6.74), controlPoint1: CGPoint(x: 6.35, y: 6.87), controlPoint2: CGPoint(x: 6.31, y: 6.81))
                _941AM.addCurve(to: CGPoint(x: 6.24, y: 6.53), controlPoint1: CGPoint(x: 6.25, y: 6.68), controlPoint2: CGPoint(x: 6.24, y: 6.6))
                _941AM.addCurve(to: CGPoint(x: 6.28, y: 6.31), controlPoint1: CGPoint(x: 6.24, y: 6.45), controlPoint2: CGPoint(x: 6.25, y: 6.38))
                _941AM.addCurve(to: CGPoint(x: 6.4, y: 6.14), controlPoint1: CGPoint(x: 6.31, y: 6.25), controlPoint2: CGPoint(x: 6.35, y: 6.19))
                _941AM.addCurve(to: CGPoint(x: 6.57, y: 6.02), controlPoint1: CGPoint(x: 6.44, y: 6.09), controlPoint2: CGPoint(x: 6.5, y: 6.05))
                _941AM.addCurve(to: CGPoint(x: 6.78, y: 5.98), controlPoint1: CGPoint(x: 6.63, y: 6), controlPoint2: CGPoint(x: 6.71, y: 5.98))
                _941AM.addCurve(to: CGPoint(x: 7.17, y: 6.14), controlPoint1: CGPoint(x: 6.94, y: 5.98), controlPoint2: CGPoint(x: 7.07, y: 6.03))
                _941AM.addCurve(to: CGPoint(x: 7.33, y: 6.53), controlPoint1: CGPoint(x: 7.28, y: 6.24), controlPoint2: CGPoint(x: 7.33, y: 6.37))
                _941AM.addCurve(to: CGPoint(x: 7.29, y: 6.74), controlPoint1: CGPoint(x: 7.33, y: 6.6), controlPoint2: CGPoint(x: 7.31, y: 6.68))
                _941AM.addCurve(to: CGPoint(x: 7.17, y: 6.92), controlPoint1: CGPoint(x: 7.26, y: 6.81), controlPoint2: CGPoint(x: 7.22, y: 6.87))
                _941AM.addCurve(to: CGPoint(x: 7, y: 7.03), controlPoint1: CGPoint(x: 7.12, y: 6.96), controlPoint2: CGPoint(x: 7.06, y: 7))
                _941AM.addCurve(to: CGPoint(x: 6.78, y: 7.07), controlPoint1: CGPoint(x: 6.93, y: 7.06), controlPoint2: CGPoint(x: 6.86, y: 7.07))
                _941AM.addLine(to: CGPoint(x: 6.78, y: 7.07))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 6.78, y: 3.55))
                _941AM.addCurve(to: CGPoint(x: 6.57, y: 3.51), controlPoint1: CGPoint(x: 6.71, y: 3.55), controlPoint2: CGPoint(x: 6.63, y: 3.54))
                _941AM.addCurve(to: CGPoint(x: 6.4, y: 3.39), controlPoint1: CGPoint(x: 6.5, y: 3.48), controlPoint2: CGPoint(x: 6.44, y: 3.44))
                _941AM.addCurve(to: CGPoint(x: 6.28, y: 3.22), controlPoint1: CGPoint(x: 6.35, y: 3.35), controlPoint2: CGPoint(x: 6.31, y: 3.29))
                _941AM.addCurve(to: CGPoint(x: 6.24, y: 3.01), controlPoint1: CGPoint(x: 6.25, y: 3.15), controlPoint2: CGPoint(x: 6.24, y: 3.08))
                _941AM.addCurve(to: CGPoint(x: 6.28, y: 2.79), controlPoint1: CGPoint(x: 6.24, y: 2.93), controlPoint2: CGPoint(x: 6.25, y: 2.86))
                _941AM.addCurve(to: CGPoint(x: 6.4, y: 2.62), controlPoint1: CGPoint(x: 6.31, y: 2.72), controlPoint2: CGPoint(x: 6.35, y: 2.67))
                _941AM.addCurve(to: CGPoint(x: 6.57, y: 2.5), controlPoint1: CGPoint(x: 6.44, y: 2.57), controlPoint2: CGPoint(x: 6.5, y: 2.53))
                _941AM.addCurve(to: CGPoint(x: 6.78, y: 2.46), controlPoint1: CGPoint(x: 6.63, y: 2.47), controlPoint2: CGPoint(x: 6.71, y: 2.46))
                _941AM.addCurve(to: CGPoint(x: 7.17, y: 2.62), controlPoint1: CGPoint(x: 6.94, y: 2.46), controlPoint2: CGPoint(x: 7.07, y: 2.51))
                _941AM.addCurve(to: CGPoint(x: 7.33, y: 3.01), controlPoint1: CGPoint(x: 7.28, y: 2.72), controlPoint2: CGPoint(x: 7.33, y: 2.85))
                _941AM.addCurve(to: CGPoint(x: 7.29, y: 3.22), controlPoint1: CGPoint(x: 7.33, y: 3.08), controlPoint2: CGPoint(x: 7.31, y: 3.15))
                _941AM.addCurve(to: CGPoint(x: 7.17, y: 3.39), controlPoint1: CGPoint(x: 7.26, y: 3.29), controlPoint2: CGPoint(x: 7.22, y: 3.35))
                _941AM.addCurve(to: CGPoint(x: 7, y: 3.51), controlPoint1: CGPoint(x: 7.12, y: 3.44), controlPoint2: CGPoint(x: 7.06, y: 3.48))
                _941AM.addCurve(to: CGPoint(x: 6.78, y: 3.55), controlPoint1: CGPoint(x: 6.93, y: 3.54), controlPoint2: CGPoint(x: 6.86, y: 3.55))
                _941AM.addLine(to: CGPoint(x: 6.78, y: 3.55))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 11.04, y: 7.14))
                _941AM.addCurve(to: CGPoint(x: 9.96, y: 6.89), controlPoint1: CGPoint(x: 10.64, y: 7.14), controlPoint2: CGPoint(x: 10.28, y: 7.06))
                _941AM.addCurve(to: CGPoint(x: 9.16, y: 6.17), controlPoint1: CGPoint(x: 9.65, y: 6.72), controlPoint2: CGPoint(x: 9.38, y: 6.48))
                _941AM.addCurve(to: CGPoint(x: 8.67, y: 5.05), controlPoint1: CGPoint(x: 8.95, y: 5.86), controlPoint2: CGPoint(x: 8.78, y: 5.49))
                _941AM.addCurve(to: CGPoint(x: 8.5, y: 3.57), controlPoint1: CGPoint(x: 8.55, y: 4.61), controlPoint2: CGPoint(x: 8.5, y: 4.12))
                _941AM.addCurve(to: CGPoint(x: 8.67, y: 2.1), controlPoint1: CGPoint(x: 8.5, y: 3.03), controlPoint2: CGPoint(x: 8.55, y: 2.54))
                _941AM.addCurve(to: CGPoint(x: 9.17, y: 0.98), controlPoint1: CGPoint(x: 8.78, y: 1.66), controlPoint2: CGPoint(x: 8.95, y: 1.29))
                _941AM.addCurve(to: CGPoint(x: 9.97, y: 0.26), controlPoint1: CGPoint(x: 9.39, y: 0.67), controlPoint2: CGPoint(x: 9.65, y: 0.43))
                _941AM.addCurve(to: CGPoint(x: 11.04, y: 0), controlPoint1: CGPoint(x: 10.28, y: 0.09), controlPoint2: CGPoint(x: 10.64, y: 0))
                _941AM.addCurve(to: CGPoint(x: 12.11, y: 0.26), controlPoint1: CGPoint(x: 11.44, y: 0), controlPoint2: CGPoint(x: 11.8, y: 0.09))
                _941AM.addCurve(to: CGPoint(x: 12.91, y: 0.97), controlPoint1: CGPoint(x: 12.43, y: 0.42), controlPoint2: CGPoint(x: 12.69, y: 0.66))
                _941AM.addCurve(to: CGPoint(x: 13.4, y: 2.09), controlPoint1: CGPoint(x: 13.13, y: 1.28), controlPoint2: CGPoint(x: 13.29, y: 1.66))
                _941AM.addCurve(to: CGPoint(x: 13.57, y: 3.57), controlPoint1: CGPoint(x: 13.52, y: 2.53), controlPoint2: CGPoint(x: 13.57, y: 3.02))
                _941AM.addCurve(to: CGPoint(x: 13.4, y: 5.04), controlPoint1: CGPoint(x: 13.57, y: 4.11), controlPoint2: CGPoint(x: 13.52, y: 4.6))
                _941AM.addCurve(to: CGPoint(x: 12.91, y: 6.17), controlPoint1: CGPoint(x: 13.29, y: 5.48), controlPoint2: CGPoint(x: 13.13, y: 5.86))
                _941AM.addCurve(to: CGPoint(x: 12.11, y: 6.89), controlPoint1: CGPoint(x: 12.69, y: 6.48), controlPoint2: CGPoint(x: 12.43, y: 6.72))
                _941AM.addCurve(to: CGPoint(x: 11.04, y: 7.14), controlPoint1: CGPoint(x: 11.8, y: 7.06), controlPoint2: CGPoint(x: 11.44, y: 7.14))
                _941AM.addLine(to: CGPoint(x: 11.04, y: 7.14))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 11.04, y: 6.39))
                _941AM.addCurve(to: CGPoint(x: 11.76, y: 6.19), controlPoint1: CGPoint(x: 11.31, y: 6.39), controlPoint2: CGPoint(x: 11.55, y: 6.32))
                _941AM.addCurve(to: CGPoint(x: 12.28, y: 5.63), controlPoint1: CGPoint(x: 11.96, y: 6.06), controlPoint2: CGPoint(x: 12.14, y: 5.87))
                _941AM.addCurve(to: CGPoint(x: 12.6, y: 4.74), controlPoint1: CGPoint(x: 12.42, y: 5.38), controlPoint2: CGPoint(x: 12.53, y: 5.09))
                _941AM.addCurve(to: CGPoint(x: 12.71, y: 3.57), controlPoint1: CGPoint(x: 12.67, y: 4.39), controlPoint2: CGPoint(x: 12.71, y: 4))
                _941AM.addCurve(to: CGPoint(x: 12.6, y: 2.41), controlPoint1: CGPoint(x: 12.71, y: 3.15), controlPoint2: CGPoint(x: 12.67, y: 2.76))
                _941AM.addCurve(to: CGPoint(x: 12.28, y: 1.53), controlPoint1: CGPoint(x: 12.53, y: 2.07), controlPoint2: CGPoint(x: 12.42, y: 1.77))
                _941AM.addCurve(to: CGPoint(x: 11.75, y: 0.96), controlPoint1: CGPoint(x: 12.13, y: 1.29), controlPoint2: CGPoint(x: 11.96, y: 1.1))
                _941AM.addCurve(to: CGPoint(x: 11.04, y: 0.76), controlPoint1: CGPoint(x: 11.55, y: 0.83), controlPoint2: CGPoint(x: 11.31, y: 0.76))
                _941AM.addCurve(to: CGPoint(x: 10.33, y: 0.96), controlPoint1: CGPoint(x: 10.77, y: 0.76), controlPoint2: CGPoint(x: 10.54, y: 0.83))
                _941AM.addCurve(to: CGPoint(x: 9.8, y: 1.53), controlPoint1: CGPoint(x: 10.12, y: 1.1), controlPoint2: CGPoint(x: 9.95, y: 1.29))
                _941AM.addCurve(to: CGPoint(x: 9.47, y: 2.42), controlPoint1: CGPoint(x: 9.66, y: 1.78), controlPoint2: CGPoint(x: 9.55, y: 2.07))
                _941AM.addCurve(to: CGPoint(x: 9.36, y: 3.57), controlPoint1: CGPoint(x: 9.4, y: 2.76), controlPoint2: CGPoint(x: 9.36, y: 3.14))
                _941AM.addCurve(to: CGPoint(x: 9.47, y: 4.73), controlPoint1: CGPoint(x: 9.36, y: 4), controlPoint2: CGPoint(x: 9.4, y: 4.39))
                _941AM.addCurve(to: CGPoint(x: 9.79, y: 5.62), controlPoint1: CGPoint(x: 9.55, y: 5.08), controlPoint2: CGPoint(x: 9.65, y: 5.38))
                _941AM.addCurve(to: CGPoint(x: 10.32, y: 6.19), controlPoint1: CGPoint(x: 9.94, y: 5.87), controlPoint2: CGPoint(x: 10.11, y: 6.06))
                _941AM.addCurve(to: CGPoint(x: 11.04, y: 6.39), controlPoint1: CGPoint(x: 10.53, y: 6.32), controlPoint2: CGPoint(x: 10.77, y: 6.39))
                _941AM.addLine(to: CGPoint(x: 11.04, y: 6.39))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 17.93, y: 0.9))
                _941AM.addLine(to: CGPoint(x: 17.93, y: 0.89))
                _941AM.addLine(to: CGPoint(x: 14.22, y: 0.89))
                _941AM.addLine(to: CGPoint(x: 14.22, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 18.78, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 18.78, y: 0.92))
                _941AM.addLine(to: CGPoint(x: 15.71, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 14.81, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 17.93, y: 0.9))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 26.09, y: 5.05))
                _941AM.addLine(to: CGPoint(x: 23.35, y: 5.05))
                _941AM.addLine(to: CGPoint(x: 22.66, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 21.75, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 24.3, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 25.15, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 27.69, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 26.79, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 26.09, y: 5.05))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 23.6, y: 4.32))
                _941AM.addLine(to: CGPoint(x: 25.84, y: 4.32))
                _941AM.addLine(to: CGPoint(x: 24.74, y: 1.17))
                _941AM.addLine(to: CGPoint(x: 24.71, y: 1.17))
                _941AM.addLine(to: CGPoint(x: 23.6, y: 4.32))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 35.32, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 34.52, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 34.52, y: 1.7))
                _941AM.addLine(to: CGPoint(x: 34.48, y: 1.7))
                _941AM.addLine(to: CGPoint(x: 32.28, y: 6.98))
                _941AM.addLine(to: CGPoint(x: 31.56, y: 6.98))
                _941AM.addLine(to: CGPoint(x: 29.36, y: 1.7))
                _941AM.addLine(to: CGPoint(x: 29.32, y: 1.7))
                _941AM.addLine(to: CGPoint(x: 29.32, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 28.52, y: 7.03))
                _941AM.addLine(to: CGPoint(x: 28.52, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 29.52, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 31.9, y: 5.88))
                _941AM.addLine(to: CGPoint(x: 31.94, y: 5.88))
                _941AM.addLine(to: CGPoint(x: 34.32, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 35.32, y: 0.12))
                _941AM.addLine(to: CGPoint(x: 35.32, y: 7.03))
                _941AM.close()
                _941AM.move(to: CGPoint(x: 35.32, y: 7.03))
                context.saveGState()
                context.translateBy(x: 134.76, y: 5.23)
                _941AM.usesEvenOddFillRule = true
                UIColor.white.setFill()
                _941AM.fill()
                context.restoreGState()
                
                /// 100%
                let _100 = UIBezierPath()
                _100.move(to: CGPoint(x: 2.39, y: 7.14))
                _100.addCurve(to: CGPoint(x: 1.57, y: 7.01), controlPoint1: CGPoint(x: 2.1, y: 7.14), controlPoint2: CGPoint(x: 1.82, y: 7.1))
                _100.addCurve(to: CGPoint(x: 0.88, y: 6.65), controlPoint1: CGPoint(x: 1.31, y: 6.93), controlPoint2: CGPoint(x: 1.08, y: 6.81))
                _100.addCurve(to: CGPoint(x: 0.38, y: 6.09), controlPoint1: CGPoint(x: 0.68, y: 6.5), controlPoint2: CGPoint(x: 0.52, y: 6.31))
                _100.addCurve(to: CGPoint(x: 0.1, y: 5.35), controlPoint1: CGPoint(x: 0.24, y: 5.87), controlPoint2: CGPoint(x: 0.15, y: 5.62))
                _100.addLine(to: CGPoint(x: 0.98, y: 5.35))
                _100.addCurve(to: CGPoint(x: 1.18, y: 5.78), controlPoint1: CGPoint(x: 1.02, y: 5.51), controlPoint2: CGPoint(x: 1.09, y: 5.65))
                _100.addCurve(to: CGPoint(x: 1.5, y: 6.1), controlPoint1: CGPoint(x: 1.27, y: 5.9), controlPoint2: CGPoint(x: 1.38, y: 6.01))
                _100.addCurve(to: CGPoint(x: 1.91, y: 6.32), controlPoint1: CGPoint(x: 1.63, y: 6.2), controlPoint2: CGPoint(x: 1.76, y: 6.27))
                _100.addCurve(to: CGPoint(x: 2.4, y: 6.39), controlPoint1: CGPoint(x: 2.07, y: 6.36), controlPoint2: CGPoint(x: 2.23, y: 6.39))
                _100.addCurve(to: CGPoint(x: 3.17, y: 6.2), controlPoint1: CGPoint(x: 2.69, y: 6.39), controlPoint2: CGPoint(x: 2.94, y: 6.33))
                _100.addCurve(to: CGPoint(x: 3.74, y: 5.64), controlPoint1: CGPoint(x: 3.39, y: 6.07), controlPoint2: CGPoint(x: 3.58, y: 5.88))
                _100.addCurve(to: CGPoint(x: 4.1, y: 4.74), controlPoint1: CGPoint(x: 3.89, y: 5.39), controlPoint2: CGPoint(x: 4.01, y: 5.09))
                _100.addCurve(to: CGPoint(x: 4.23, y: 3.51), controlPoint1: CGPoint(x: 4.18, y: 4.38), controlPoint2: CGPoint(x: 4.23, y: 3.97))
                _100.addLine(to: CGPoint(x: 4.23, y: 3.51))
                _100.addLine(to: CGPoint(x: 4.22, y: 3.51))
                _100.addCurve(to: CGPoint(x: 3.92, y: 3.98), controlPoint1: CGPoint(x: 4.14, y: 3.69), controlPoint2: CGPoint(x: 4.04, y: 3.84))
                _100.addCurve(to: CGPoint(x: 3.47, y: 4.33), controlPoint1: CGPoint(x: 3.79, y: 4.12), controlPoint2: CGPoint(x: 3.64, y: 4.24))
                _100.addCurve(to: CGPoint(x: 2.92, y: 4.56), controlPoint1: CGPoint(x: 3.31, y: 4.43), controlPoint2: CGPoint(x: 3.12, y: 4.51))
                _100.addCurve(to: CGPoint(x: 2.29, y: 4.64), controlPoint1: CGPoint(x: 2.72, y: 4.62), controlPoint2: CGPoint(x: 2.51, y: 4.64))
                _100.addCurve(to: CGPoint(x: 1.38, y: 4.47), controlPoint1: CGPoint(x: 1.96, y: 4.64), controlPoint2: CGPoint(x: 1.66, y: 4.59))
                _100.addCurve(to: CGPoint(x: 0.65, y: 3.99), controlPoint1: CGPoint(x: 1.1, y: 4.36), controlPoint2: CGPoint(x: 0.85, y: 4.2))
                _100.addCurve(to: CGPoint(x: 0.17, y: 3.27), controlPoint1: CGPoint(x: 0.45, y: 3.79), controlPoint2: CGPoint(x: 0.29, y: 3.55))
                _100.addCurve(to: CGPoint(x: 0, y: 2.36), controlPoint1: CGPoint(x: 0.06, y: 2.99), controlPoint2: CGPoint(x: 0, y: 2.69))
                _100.addCurve(to: CGPoint(x: 0.18, y: 1.41), controlPoint1: CGPoint(x: 0, y: 2.02), controlPoint2: CGPoint(x: 0.06, y: 1.7))
                _100.addCurve(to: CGPoint(x: 0.69, y: 0.67), controlPoint1: CGPoint(x: 0.3, y: 1.13), controlPoint2: CGPoint(x: 0.47, y: 0.88))
                _100.addCurve(to: CGPoint(x: 1.47, y: 0.18), controlPoint1: CGPoint(x: 0.91, y: 0.46), controlPoint2: CGPoint(x: 1.17, y: 0.3))
                _100.addCurve(to: CGPoint(x: 2.44, y: 0), controlPoint1: CGPoint(x: 1.76, y: 0.06), controlPoint2: CGPoint(x: 2.09, y: 0))
                _100.addCurve(to: CGPoint(x: 3.18, y: 0.1), controlPoint1: CGPoint(x: 2.7, y: 0), controlPoint2: CGPoint(x: 2.95, y: 0.03))
                _100.addCurve(to: CGPoint(x: 3.82, y: 0.4), controlPoint1: CGPoint(x: 3.41, y: 0.17), controlPoint2: CGPoint(x: 3.62, y: 0.27))
                _100.addCurve(to: CGPoint(x: 4.34, y: 0.89), controlPoint1: CGPoint(x: 4.01, y: 0.54), controlPoint2: CGPoint(x: 4.18, y: 0.7))
                _100.addCurve(to: CGPoint(x: 4.72, y: 1.55), controlPoint1: CGPoint(x: 4.49, y: 1.08), controlPoint2: CGPoint(x: 4.62, y: 1.3))
                _100.addCurve(to: CGPoint(x: 5.06, y: 3.46), controlPoint1: CGPoint(x: 4.95, y: 2.07), controlPoint2: CGPoint(x: 5.06, y: 2.71))
                _100.addCurve(to: CGPoint(x: 4.88, y: 5.01), controlPoint1: CGPoint(x: 5.06, y: 4.04), controlPoint2: CGPoint(x: 5, y: 4.55))
                _100.addCurve(to: CGPoint(x: 4.36, y: 6.17), controlPoint1: CGPoint(x: 4.76, y: 5.47), controlPoint2: CGPoint(x: 4.59, y: 5.85))
                _100.addCurve(to: CGPoint(x: 3.52, y: 6.89), controlPoint1: CGPoint(x: 4.13, y: 6.49), controlPoint2: CGPoint(x: 3.85, y: 6.73))
                _100.addCurve(to: CGPoint(x: 2.39, y: 7.14), controlPoint1: CGPoint(x: 3.19, y: 7.06), controlPoint2: CGPoint(x: 2.81, y: 7.14))
                _100.addLine(to: CGPoint(x: 2.39, y: 7.14))
                _100.close()
                _100.move(to: CGPoint(x: 2.44, y: 3.89))
                _100.addCurve(to: CGPoint(x: 3.07, y: 3.77), controlPoint1: CGPoint(x: 2.67, y: 3.89), controlPoint2: CGPoint(x: 2.88, y: 3.85))
                _100.addCurve(to: CGPoint(x: 3.58, y: 3.45), controlPoint1: CGPoint(x: 3.27, y: 3.69), controlPoint2: CGPoint(x: 3.44, y: 3.59))
                _100.addCurve(to: CGPoint(x: 3.91, y: 2.96), controlPoint1: CGPoint(x: 3.72, y: 3.31), controlPoint2: CGPoint(x: 3.83, y: 3.15))
                _100.addCurve(to: CGPoint(x: 4.03, y: 2.35), controlPoint1: CGPoint(x: 3.99, y: 2.78), controlPoint2: CGPoint(x: 4.03, y: 2.57))
                _100.addCurve(to: CGPoint(x: 3.91, y: 1.73), controlPoint1: CGPoint(x: 4.03, y: 2.13), controlPoint2: CGPoint(x: 3.99, y: 1.93))
                _100.addCurve(to: CGPoint(x: 3.57, y: 1.23), controlPoint1: CGPoint(x: 3.83, y: 1.54), controlPoint2: CGPoint(x: 3.72, y: 1.37))
                _100.addCurve(to: CGPoint(x: 3.07, y: 0.9), controlPoint1: CGPoint(x: 3.43, y: 1.09), controlPoint2: CGPoint(x: 3.27, y: 0.98))
                _100.addCurve(to: CGPoint(x: 2.45, y: 0.78), controlPoint1: CGPoint(x: 2.88, y: 0.82), controlPoint2: CGPoint(x: 2.68, y: 0.78))
                _100.addCurve(to: CGPoint(x: 1.83, y: 0.9), controlPoint1: CGPoint(x: 2.23, y: 0.78), controlPoint2: CGPoint(x: 2.03, y: 0.82))
                _100.addCurve(to: CGPoint(x: 1.33, y: 1.23), controlPoint1: CGPoint(x: 1.64, y: 0.98), controlPoint2: CGPoint(x: 1.47, y: 1.09))
                _100.addCurve(to: CGPoint(x: 0.99, y: 1.72), controlPoint1: CGPoint(x: 1.19, y: 1.37), controlPoint2: CGPoint(x: 1.07, y: 1.53))
                _100.addCurve(to: CGPoint(x: 0.87, y: 2.33), controlPoint1: CGPoint(x: 0.91, y: 1.91), controlPoint2: CGPoint(x: 0.87, y: 2.11))
                _100.addCurve(to: CGPoint(x: 0.99, y: 2.96), controlPoint1: CGPoint(x: 0.87, y: 2.56), controlPoint2: CGPoint(x: 0.91, y: 2.77))
                _100.addCurve(to: CGPoint(x: 1.31, y: 3.45), controlPoint1: CGPoint(x: 1.07, y: 3.15), controlPoint2: CGPoint(x: 1.17, y: 3.31))
                _100.addCurve(to: CGPoint(x: 1.81, y: 3.77), controlPoint1: CGPoint(x: 1.46, y: 3.58), controlPoint2: CGPoint(x: 1.62, y: 3.69))
                _100.addCurve(to: CGPoint(x: 2.44, y: 3.89), controlPoint1: CGPoint(x: 2, y: 3.85), controlPoint2: CGPoint(x: 2.21, y: 3.89))
                _100.addLine(to: CGPoint(x: 2.44, y: 3.89))
                _100.close()
                _100.move(to: CGPoint(x: 7.46, y: 3.11))
                _100.addLine(to: CGPoint(x: 8.29, y: 3.11))
                _100.addCurve(to: CGPoint(x: 8.84, y: 3.02), controlPoint1: CGPoint(x: 8.49, y: 3.11), controlPoint2: CGPoint(x: 8.67, y: 3.08))
                _100.addCurve(to: CGPoint(x: 9.26, y: 2.77), controlPoint1: CGPoint(x: 9, y: 2.96), controlPoint2: CGPoint(x: 9.14, y: 2.88))
                _100.addCurve(to: CGPoint(x: 9.54, y: 2.39), controlPoint1: CGPoint(x: 9.38, y: 2.66), controlPoint2: CGPoint(x: 9.48, y: 2.53))
                _100.addCurve(to: CGPoint(x: 9.64, y: 1.9), controlPoint1: CGPoint(x: 9.61, y: 2.24), controlPoint2: CGPoint(x: 9.64, y: 2.08))
                _100.addCurve(to: CGPoint(x: 9.55, y: 1.43), controlPoint1: CGPoint(x: 9.64, y: 1.73), controlPoint2: CGPoint(x: 9.61, y: 1.57))
                _100.addCurve(to: CGPoint(x: 9.3, y: 1.07), controlPoint1: CGPoint(x: 9.5, y: 1.29), controlPoint2: CGPoint(x: 9.41, y: 1.17))
                _100.addCurve(to: CGPoint(x: 8.88, y: 0.84), controlPoint1: CGPoint(x: 9.18, y: 0.97), controlPoint2: CGPoint(x: 9.04, y: 0.89))
                _100.addCurve(to: CGPoint(x: 8.3, y: 0.75), controlPoint1: CGPoint(x: 8.71, y: 0.78), controlPoint2: CGPoint(x: 8.52, y: 0.75))
                _100.addCurve(to: CGPoint(x: 7.76, y: 0.83), controlPoint1: CGPoint(x: 8.1, y: 0.75), controlPoint2: CGPoint(x: 7.92, y: 0.78))
                _100.addCurve(to: CGPoint(x: 7.33, y: 1.07), controlPoint1: CGPoint(x: 7.59, y: 0.89), controlPoint2: CGPoint(x: 7.45, y: 0.97))
                _100.addCurve(to: CGPoint(x: 7.04, y: 1.44), controlPoint1: CGPoint(x: 7.21, y: 1.17), controlPoint2: CGPoint(x: 7.12, y: 1.29))
                _100.addCurve(to: CGPoint(x: 6.9, y: 1.93), controlPoint1: CGPoint(x: 6.97, y: 1.58), controlPoint2: CGPoint(x: 6.92, y: 1.75))
                _100.addLine(to: CGPoint(x: 6.08, y: 1.93))
                _100.addCurve(to: CGPoint(x: 6.29, y: 1.13), controlPoint1: CGPoint(x: 6.1, y: 1.64), controlPoint2: CGPoint(x: 6.17, y: 1.37))
                _100.addCurve(to: CGPoint(x: 6.76, y: 0.53), controlPoint1: CGPoint(x: 6.41, y: 0.9), controlPoint2: CGPoint(x: 6.56, y: 0.7))
                _100.addCurve(to: CGPoint(x: 7.45, y: 0.14), controlPoint1: CGPoint(x: 6.95, y: 0.36), controlPoint2: CGPoint(x: 7.19, y: 0.23))
                _100.addCurve(to: CGPoint(x: 8.34, y: 0), controlPoint1: CGPoint(x: 7.72, y: 0.05), controlPoint2: CGPoint(x: 8.01, y: 0))
                _100.addCurve(to: CGPoint(x: 9.2, y: 0.14), controlPoint1: CGPoint(x: 8.65, y: 0), controlPoint2: CGPoint(x: 8.93, y: 0.05))
                _100.addCurve(to: CGPoint(x: 9.88, y: 0.5), controlPoint1: CGPoint(x: 9.46, y: 0.22), controlPoint2: CGPoint(x: 9.69, y: 0.35))
                _100.addCurve(to: CGPoint(x: 10.34, y: 1.07), controlPoint1: CGPoint(x: 10.08, y: 0.66), controlPoint2: CGPoint(x: 10.23, y: 0.85))
                _100.addCurve(to: CGPoint(x: 10.5, y: 1.79), controlPoint1: CGPoint(x: 10.45, y: 1.29), controlPoint2: CGPoint(x: 10.5, y: 1.53))
                _100.addCurve(to: CGPoint(x: 10.4, y: 2.39), controlPoint1: CGPoint(x: 10.5, y: 2), controlPoint2: CGPoint(x: 10.47, y: 2.2))
                _100.addCurve(to: CGPoint(x: 10.12, y: 2.87), controlPoint1: CGPoint(x: 10.34, y: 2.57), controlPoint2: CGPoint(x: 10.24, y: 2.73))
                _100.addCurve(to: CGPoint(x: 9.67, y: 3.23), controlPoint1: CGPoint(x: 10, y: 3.02), controlPoint2: CGPoint(x: 9.85, y: 3.13))
                _100.addCurve(to: CGPoint(x: 9.09, y: 3.43), controlPoint1: CGPoint(x: 9.5, y: 3.32), controlPoint2: CGPoint(x: 9.3, y: 3.39))
                _100.addLine(to: CGPoint(x: 9.09, y: 3.45))
                _100.addCurve(to: CGPoint(x: 9.8, y: 3.6), controlPoint1: CGPoint(x: 9.35, y: 3.46), controlPoint2: CGPoint(x: 9.59, y: 3.51))
                _100.addCurve(to: CGPoint(x: 10.33, y: 3.95), controlPoint1: CGPoint(x: 10.01, y: 3.69), controlPoint2: CGPoint(x: 10.19, y: 3.8))
                _100.addCurve(to: CGPoint(x: 10.68, y: 4.46), controlPoint1: CGPoint(x: 10.48, y: 4.09), controlPoint2: CGPoint(x: 10.6, y: 4.26))
                _100.addCurve(to: CGPoint(x: 10.8, y: 5.13), controlPoint1: CGPoint(x: 10.76, y: 4.66), controlPoint2: CGPoint(x: 10.8, y: 4.88))
                _100.addCurve(to: CGPoint(x: 10.61, y: 5.94), controlPoint1: CGPoint(x: 10.8, y: 5.42), controlPoint2: CGPoint(x: 10.74, y: 5.69))
                _100.addCurve(to: CGPoint(x: 10.09, y: 6.58), controlPoint1: CGPoint(x: 10.49, y: 6.19), controlPoint2: CGPoint(x: 10.31, y: 6.4))
                _100.addCurve(to: CGPoint(x: 9.32, y: 6.99), controlPoint1: CGPoint(x: 9.87, y: 6.76), controlPoint2: CGPoint(x: 9.62, y: 6.89))
                _100.addCurve(to: CGPoint(x: 8.37, y: 7.14), controlPoint1: CGPoint(x: 9.02, y: 7.09), controlPoint2: CGPoint(x: 8.71, y: 7.14))
                _100.addCurve(to: CGPoint(x: 7.39, y: 7), controlPoint1: CGPoint(x: 8.01, y: 7.14), controlPoint2: CGPoint(x: 7.68, y: 7.09))
                _100.addCurve(to: CGPoint(x: 6.63, y: 6.6), controlPoint1: CGPoint(x: 7.09, y: 6.9), controlPoint2: CGPoint(x: 6.84, y: 6.77))
                _100.addCurve(to: CGPoint(x: 6.14, y: 5.98), controlPoint1: CGPoint(x: 6.43, y: 6.43), controlPoint2: CGPoint(x: 6.26, y: 6.22))
                _100.addCurve(to: CGPoint(x: 5.94, y: 5.2), controlPoint1: CGPoint(x: 6.02, y: 5.75), controlPoint2: CGPoint(x: 5.95, y: 5.48))
                _100.addLine(to: CGPoint(x: 6.77, y: 5.2))
                _100.addCurve(to: CGPoint(x: 6.92, y: 5.69), controlPoint1: CGPoint(x: 6.78, y: 5.38), controlPoint2: CGPoint(x: 6.83, y: 5.54))
                _100.addCurve(to: CGPoint(x: 7.24, y: 6.06), controlPoint1: CGPoint(x: 7, y: 5.83), controlPoint2: CGPoint(x: 7.11, y: 5.96))
                _100.addCurve(to: CGPoint(x: 7.73, y: 6.31), controlPoint1: CGPoint(x: 7.38, y: 6.17), controlPoint2: CGPoint(x: 7.54, y: 6.25))
                _100.addCurve(to: CGPoint(x: 8.36, y: 6.39), controlPoint1: CGPoint(x: 7.91, y: 6.37), controlPoint2: CGPoint(x: 8.12, y: 6.39))
                _100.addCurve(to: CGPoint(x: 8.99, y: 6.3), controlPoint1: CGPoint(x: 8.59, y: 6.39), controlPoint2: CGPoint(x: 8.8, y: 6.36))
                _100.addCurve(to: CGPoint(x: 9.48, y: 6.05), controlPoint1: CGPoint(x: 9.18, y: 6.24), controlPoint2: CGPoint(x: 9.34, y: 6.16))
                _100.addCurve(to: CGPoint(x: 9.81, y: 5.65), controlPoint1: CGPoint(x: 9.62, y: 5.94), controlPoint2: CGPoint(x: 9.73, y: 5.81))
                _100.addCurve(to: CGPoint(x: 9.93, y: 5.15), controlPoint1: CGPoint(x: 9.89, y: 5.5), controlPoint2: CGPoint(x: 9.93, y: 5.34))
                _100.addCurve(to: CGPoint(x: 9.82, y: 4.6), controlPoint1: CGPoint(x: 9.93, y: 4.95), controlPoint2: CGPoint(x: 9.89, y: 4.77))
                _100.addCurve(to: CGPoint(x: 9.5, y: 4.19), controlPoint1: CGPoint(x: 9.74, y: 4.44), controlPoint2: CGPoint(x: 9.64, y: 4.3))
                _100.addCurve(to: CGPoint(x: 8.99, y: 3.93), controlPoint1: CGPoint(x: 9.36, y: 4.08), controlPoint2: CGPoint(x: 9.19, y: 3.99))
                _100.addCurve(to: CGPoint(x: 8.33, y: 3.84), controlPoint1: CGPoint(x: 8.8, y: 3.87), controlPoint2: CGPoint(x: 8.57, y: 3.84))
                _100.addLine(to: CGPoint(x: 7.46, y: 3.84))
                _100.addLine(to: CGPoint(x: 7.46, y: 3.11))
                _100.close()
                _100.move(to: CGPoint(x: 11.95, y: 7.03))
                _100.addLine(to: CGPoint(x: 17, y: 0.12))
                _100.addLine(to: CGPoint(x: 17.82, y: 0.12))
                _100.addLine(to: CGPoint(x: 12.78, y: 7.03))
                _100.addLine(to: CGPoint(x: 11.95, y: 7.03))
                _100.close()
                _100.move(to: CGPoint(x: 18.26, y: 5.38))
                _100.addCurve(to: CGPoint(x: 18.16, y: 6.09), controlPoint1: CGPoint(x: 18.26, y: 5.64), controlPoint2: CGPoint(x: 18.23, y: 5.88))
                _100.addCurve(to: CGPoint(x: 17.87, y: 6.63), controlPoint1: CGPoint(x: 18.09, y: 6.3), controlPoint2: CGPoint(x: 18, y: 6.48))
                _100.addCurve(to: CGPoint(x: 17.42, y: 6.98), controlPoint1: CGPoint(x: 17.74, y: 6.78), controlPoint2: CGPoint(x: 17.59, y: 6.9))
                _100.addCurve(to: CGPoint(x: 16.82, y: 7.1), controlPoint1: CGPoint(x: 17.24, y: 7.06), controlPoint2: CGPoint(x: 17.04, y: 7.1))
                _100.addCurve(to: CGPoint(x: 16.23, y: 6.98), controlPoint1: CGPoint(x: 16.6, y: 7.1), controlPoint2: CGPoint(x: 16.4, y: 7.06))
                _100.addCurve(to: CGPoint(x: 15.77, y: 6.63), controlPoint1: CGPoint(x: 16.05, y: 6.9), controlPoint2: CGPoint(x: 15.9, y: 6.78))
                _100.addCurve(to: CGPoint(x: 15.47, y: 6.09), controlPoint1: CGPoint(x: 15.64, y: 6.48), controlPoint2: CGPoint(x: 15.54, y: 6.3))
                _100.addCurve(to: CGPoint(x: 15.37, y: 5.38), controlPoint1: CGPoint(x: 15.41, y: 5.88), controlPoint2: CGPoint(x: 15.37, y: 5.64))
                _100.addCurve(to: CGPoint(x: 15.47, y: 4.67), controlPoint1: CGPoint(x: 15.37, y: 5.12), controlPoint2: CGPoint(x: 15.41, y: 4.89))
                _100.addCurve(to: CGPoint(x: 15.77, y: 4.13), controlPoint1: CGPoint(x: 15.54, y: 4.46), controlPoint2: CGPoint(x: 15.64, y: 4.28))
                _100.addCurve(to: CGPoint(x: 16.23, y: 3.78), controlPoint1: CGPoint(x: 15.9, y: 3.98), controlPoint2: CGPoint(x: 16.05, y: 3.86))
                _100.addCurve(to: CGPoint(x: 16.82, y: 3.66), controlPoint1: CGPoint(x: 16.4, y: 3.7), controlPoint2: CGPoint(x: 16.6, y: 3.66))
                _100.addCurve(to: CGPoint(x: 17.42, y: 3.78), controlPoint1: CGPoint(x: 17.04, y: 3.66), controlPoint2: CGPoint(x: 17.24, y: 3.7))
                _100.addCurve(to: CGPoint(x: 17.87, y: 4.13), controlPoint1: CGPoint(x: 17.59, y: 3.86), controlPoint2: CGPoint(x: 17.74, y: 3.98))
                _100.addCurve(to: CGPoint(x: 18.16, y: 4.67), controlPoint1: CGPoint(x: 18, y: 4.28), controlPoint2: CGPoint(x: 18.09, y: 4.46))
                _100.addCurve(to: CGPoint(x: 18.26, y: 5.38), controlPoint1: CGPoint(x: 18.23, y: 4.89), controlPoint2: CGPoint(x: 18.26, y: 5.12))
                _100.addLine(to: CGPoint(x: 18.26, y: 5.38))
                _100.close()
                _100.move(to: CGPoint(x: 16.82, y: 6.52))
                _100.addCurve(to: CGPoint(x: 17.1, y: 6.44), controlPoint1: CGPoint(x: 16.93, y: 6.52), controlPoint2: CGPoint(x: 17.02, y: 6.49))
                _100.addCurve(to: CGPoint(x: 17.32, y: 6.21), controlPoint1: CGPoint(x: 17.19, y: 6.39), controlPoint2: CGPoint(x: 17.26, y: 6.31))
                _100.addCurve(to: CGPoint(x: 17.45, y: 5.85), controlPoint1: CGPoint(x: 17.38, y: 6.11), controlPoint2: CGPoint(x: 17.42, y: 5.99))
                _100.addCurve(to: CGPoint(x: 17.5, y: 5.38), controlPoint1: CGPoint(x: 17.48, y: 5.71), controlPoint2: CGPoint(x: 17.5, y: 5.55))
                _100.addCurve(to: CGPoint(x: 17.32, y: 4.55), controlPoint1: CGPoint(x: 17.5, y: 5.02), controlPoint2: CGPoint(x: 17.44, y: 4.74))
                _100.addCurve(to: CGPoint(x: 16.82, y: 4.25), controlPoint1: CGPoint(x: 17.2, y: 4.35), controlPoint2: CGPoint(x: 17.04, y: 4.25))
                _100.addCurve(to: CGPoint(x: 16.32, y: 4.55), controlPoint1: CGPoint(x: 16.61, y: 4.25), controlPoint2: CGPoint(x: 16.44, y: 4.35))
                _100.addCurve(to: CGPoint(x: 16.14, y: 5.38), controlPoint1: CGPoint(x: 16.2, y: 4.76), controlPoint2: CGPoint(x: 16.14, y: 5.03))
                _100.addCurve(to: CGPoint(x: 16.18, y: 5.85), controlPoint1: CGPoint(x: 16.14, y: 5.55), controlPoint2: CGPoint(x: 16.15, y: 5.71))
                _100.addCurve(to: CGPoint(x: 16.32, y: 6.21), controlPoint1: CGPoint(x: 16.22, y: 5.99), controlPoint2: CGPoint(x: 16.26, y: 6.11))
                _100.addCurve(to: CGPoint(x: 16.54, y: 6.44), controlPoint1: CGPoint(x: 16.38, y: 6.31), controlPoint2: CGPoint(x: 16.45, y: 6.39))
                _100.addCurve(to: CGPoint(x: 16.82, y: 6.52), controlPoint1: CGPoint(x: 16.62, y: 6.49), controlPoint2: CGPoint(x: 16.72, y: 6.52))
                _100.addLine(to: CGPoint(x: 16.82, y: 6.52))
                _100.close()
                _100.move(to: CGPoint(x: 14.43, y: 1.75))
                _100.addCurve(to: CGPoint(x: 14.32, y: 2.46), controlPoint1: CGPoint(x: 14.43, y: 2.01), controlPoint2: CGPoint(x: 14.39, y: 2.25))
                _100.addCurve(to: CGPoint(x: 14.03, y: 3.01), controlPoint1: CGPoint(x: 14.25, y: 2.67), controlPoint2: CGPoint(x: 14.16, y: 2.86))
                _100.addCurve(to: CGPoint(x: 13.58, y: 3.35), controlPoint1: CGPoint(x: 13.9, y: 3.16), controlPoint2: CGPoint(x: 13.75, y: 3.27))
                _100.addCurve(to: CGPoint(x: 12.98, y: 3.47), controlPoint1: CGPoint(x: 13.4, y: 3.43), controlPoint2: CGPoint(x: 13.2, y: 3.47))
                _100.addCurve(to: CGPoint(x: 12.39, y: 3.35), controlPoint1: CGPoint(x: 12.76, y: 3.47), controlPoint2: CGPoint(x: 12.56, y: 3.43))
                _100.addCurve(to: CGPoint(x: 11.93, y: 3.01), controlPoint1: CGPoint(x: 12.21, y: 3.27), controlPoint2: CGPoint(x: 12.06, y: 3.16))
                _100.addCurve(to: CGPoint(x: 11.64, y: 2.46), controlPoint1: CGPoint(x: 11.8, y: 2.86), controlPoint2: CGPoint(x: 11.7, y: 2.67))
                _100.addCurve(to: CGPoint(x: 11.53, y: 1.75), controlPoint1: CGPoint(x: 11.57, y: 2.25), controlPoint2: CGPoint(x: 11.53, y: 2.01))
                _100.addCurve(to: CGPoint(x: 11.64, y: 1.05), controlPoint1: CGPoint(x: 11.53, y: 1.49), controlPoint2: CGPoint(x: 11.57, y: 1.26))
                _100.addCurve(to: CGPoint(x: 11.93, y: 0.5), controlPoint1: CGPoint(x: 11.7, y: 0.83), controlPoint2: CGPoint(x: 11.8, y: 0.65))
                _100.addCurve(to: CGPoint(x: 12.39, y: 0.16), controlPoint1: CGPoint(x: 12.06, y: 0.35), controlPoint2: CGPoint(x: 12.21, y: 0.24))
                _100.addCurve(to: CGPoint(x: 12.98, y: 0.03), controlPoint1: CGPoint(x: 12.56, y: 0.07), controlPoint2: CGPoint(x: 12.76, y: 0.03))
                _100.addCurve(to: CGPoint(x: 13.58, y: 0.16), controlPoint1: CGPoint(x: 13.2, y: 0.03), controlPoint2: CGPoint(x: 13.4, y: 0.07))
                _100.addCurve(to: CGPoint(x: 14.03, y: 0.5), controlPoint1: CGPoint(x: 13.75, y: 0.24), controlPoint2: CGPoint(x: 13.9, y: 0.35))
                _100.addCurve(to: CGPoint(x: 14.32, y: 1.05), controlPoint1: CGPoint(x: 14.16, y: 0.65), controlPoint2: CGPoint(x: 14.25, y: 0.83))
                _100.addCurve(to: CGPoint(x: 14.43, y: 1.75), controlPoint1: CGPoint(x: 14.39, y: 1.26), controlPoint2: CGPoint(x: 14.43, y: 1.49))
                _100.addLine(to: CGPoint(x: 14.43, y: 1.75))
                _100.close()
                _100.move(to: CGPoint(x: 12.98, y: 2.89))
                _100.addCurve(to: CGPoint(x: 13.27, y: 2.81), controlPoint1: CGPoint(x: 13.09, y: 2.89), controlPoint2: CGPoint(x: 13.18, y: 2.86))
                _100.addCurve(to: CGPoint(x: 13.48, y: 2.58), controlPoint1: CGPoint(x: 13.35, y: 2.76), controlPoint2: CGPoint(x: 13.42, y: 2.68))
                _100.addCurve(to: CGPoint(x: 13.61, y: 2.23), controlPoint1: CGPoint(x: 13.54, y: 2.49), controlPoint2: CGPoint(x: 13.58, y: 2.37))
                _100.addCurve(to: CGPoint(x: 13.66, y: 1.75), controlPoint1: CGPoint(x: 13.64, y: 2.09), controlPoint2: CGPoint(x: 13.66, y: 1.93))
                _100.addCurve(to: CGPoint(x: 13.48, y: 0.92), controlPoint1: CGPoint(x: 13.66, y: 1.39), controlPoint2: CGPoint(x: 13.6, y: 1.12))
                _100.addCurve(to: CGPoint(x: 12.98, y: 0.62), controlPoint1: CGPoint(x: 13.37, y: 0.72), controlPoint2: CGPoint(x: 13.2, y: 0.62))
                _100.addCurve(to: CGPoint(x: 12.48, y: 0.93), controlPoint1: CGPoint(x: 12.77, y: 0.62), controlPoint2: CGPoint(x: 12.6, y: 0.72))
                _100.addCurve(to: CGPoint(x: 12.3, y: 1.75), controlPoint1: CGPoint(x: 12.36, y: 1.13), controlPoint2: CGPoint(x: 12.3, y: 1.4))
                _100.addCurve(to: CGPoint(x: 12.35, y: 2.23), controlPoint1: CGPoint(x: 12.3, y: 1.93), controlPoint2: CGPoint(x: 12.31, y: 2.09))
                _100.addCurve(to: CGPoint(x: 12.48, y: 2.58), controlPoint1: CGPoint(x: 12.38, y: 2.37), controlPoint2: CGPoint(x: 12.42, y: 2.49))
                _100.addCurve(to: CGPoint(x: 12.7, y: 2.81), controlPoint1: CGPoint(x: 12.54, y: 2.68), controlPoint2: CGPoint(x: 12.61, y: 2.76))
                _100.addCurve(to: CGPoint(x: 12.98, y: 2.89), controlPoint1: CGPoint(x: 12.78, y: 2.86), controlPoint2: CGPoint(x: 12.88, y: 2.89))
                _100.addLine(to: CGPoint(x: 12.98, y: 2.89))
                _100.close()
                _100.move(to: CGPoint(x: 12.98, y: 2.89))
                context.saveGState()
                context.translateBy(x: 260.57, y: 5.23)
                _100.usesEvenOddFillRule = true
                UIColor.white.setFill()
                _100.fill()
                context.restoreGState()
                
                /// Battery
                let battery = UIBezierPath()
                battery.move(to: CGPoint(x: 0.61, y: 0))
                battery.addLine(to: CGPoint(x: 17.75, y: 0))
                battery.addCurve(to: CGPoint(x: 18.36, y: 0.61), controlPoint1: CGPoint(x: 18.09, y: 0), controlPoint2: CGPoint(x: 18.36, y: 0.27))
                battery.addLine(to: CGPoint(x: 18.36, y: 7.15))
                battery.addCurve(to: CGPoint(x: 17.75, y: 7.76), controlPoint1: CGPoint(x: 18.36, y: 7.48), controlPoint2: CGPoint(x: 18.09, y: 7.76))
                battery.addLine(to: CGPoint(x: 0.61, y: 7.76))
                battery.addCurve(to: CGPoint(x: 0, y: 7.15), controlPoint1: CGPoint(x: 0.27, y: 7.76), controlPoint2: CGPoint(x: 0, y: 7.49))
                battery.addLine(to: CGPoint(x: 0, y: 0.61))
                battery.addCurve(to: CGPoint(x: 0.61, y: 0), controlPoint1: CGPoint(x: 0, y: 0.28), controlPoint2: CGPoint(x: 0.27, y: 0))
                battery.close()
                battery.move(to: CGPoint(x: 18.77, y: 2.45))
                battery.addLine(to: CGPoint(x: 19.58, y: 2.45))
                battery.addCurve(to: CGPoint(x: 19.99, y: 2.86), controlPoint1: CGPoint(x: 19.8, y: 2.45), controlPoint2: CGPoint(x: 19.99, y: 2.63))
                battery.addLine(to: CGPoint(x: 19.99, y: 4.9))
                battery.addCurve(to: CGPoint(x: 19.58, y: 5.31), controlPoint1: CGPoint(x: 19.99, y: 5.12), controlPoint2: CGPoint(x: 19.81, y: 5.31))
                battery.addLine(to: CGPoint(x: 18.77, y: 5.31))
                battery.addLine(to: CGPoint(x: 18.77, y: 2.45))
                battery.close()
                battery.move(to: CGPoint(x: 0.81, y: 0.41))
                battery.addCurve(to: CGPoint(x: 0.41, y: 0.82), controlPoint1: CGPoint(x: 0.59, y: 0.41), controlPoint2: CGPoint(x: 0.41, y: 0.59))
                battery.addLine(to: CGPoint(x: 0.41, y: 6.94))
                battery.addCurve(to: CGPoint(x: 0.81, y: 7.35), controlPoint1: CGPoint(x: 0.41, y: 7.17), controlPoint2: CGPoint(x: 0.58, y: 7.35))
                battery.addLine(to: CGPoint(x: 17.55, y: 7.35))
                battery.addCurve(to: CGPoint(x: 17.95, y: 6.94), controlPoint1: CGPoint(x: 17.77, y: 7.35), controlPoint2: CGPoint(x: 17.95, y: 7.17))
                battery.addLine(to: CGPoint(x: 17.95, y: 0.82))
                battery.addCurve(to: CGPoint(x: 17.55, y: 0.41), controlPoint1: CGPoint(x: 17.95, y: 0.59), controlPoint2: CGPoint(x: 17.78, y: 0.41))
                battery.addLine(to: CGPoint(x: 0.81, y: 0.41))
                battery.close()
                battery.move(to: CGPoint(x: 1.02, y: 0.82))
                battery.addLine(to: CGPoint(x: 15.3, y: 0.82))
                battery.addCurve(to: CGPoint(x: 15.5, y: 1.02), controlPoint1: CGPoint(x: 15.41, y: 0.82), controlPoint2: CGPoint(x: 15.5, y: 0.91))
                battery.addLine(to: CGPoint(x: 15.5, y: 6.74))
                battery.addCurve(to: CGPoint(x: 15.3, y: 6.94), controlPoint1: CGPoint(x: 15.5, y: 6.86), controlPoint2: CGPoint(x: 15.41, y: 6.94))
                battery.addLine(to: CGPoint(x: 1.02, y: 6.94))
                battery.addCurve(to: CGPoint(x: 0.82, y: 6.74), controlPoint1: CGPoint(x: 0.91, y: 6.94), controlPoint2: CGPoint(x: 0.82, y: 6.85))
                battery.addLine(to: CGPoint(x: 0.82, y: 1.02))
                battery.addCurve(to: CGPoint(x: 1.02, y: 0.82), controlPoint1: CGPoint(x: 0.82, y: 0.9), controlPoint2: CGPoint(x: 0.91, y: 0.82))
                battery.close()
                battery.move(to: CGPoint(x: 1.02, y: 0.82))
                context.saveGState()
                context.translateBy(x: 281.52, y: 4.49)
                battery.usesEvenOddFillRule = true
                UIColor.white.setFill()
                battery.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Home
            let home2 = UIBezierPath()
            home2.move(to: CGPoint(x: 14.69, y: 5.23))
            home2.addLine(to: CGPoint(x: 14.69, y: 5.23))
            home2.addLine(to: CGPoint(x: 8.18, y: 0.2))
            home2.addCurve(to: CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 7.99, y: 0.07), controlPoint2: CGPoint(x: 7.76, y: 0))
            home2.addCurve(to: CGPoint(x: 6.82, y: 0.2), controlPoint1: CGPoint(x: 7.24, y: 0), controlPoint2: CGPoint(x: 7, y: 0.07))
            home2.addCurve(to: CGPoint(x: 0.38, y: 5.18), controlPoint1: CGPoint(x: 6.82, y: 0.2), controlPoint2: CGPoint(x: 0.5, y: 5.09))
            home2.addLine(to: CGPoint(x: 0.38, y: 5.18))
            home2.addCurve(to: CGPoint(x: 0, y: 5.99), controlPoint1: CGPoint(x: 0.15, y: 5.37), controlPoint2: CGPoint(x: 0, y: 5.66))
            home2.addLine(to: CGPoint(x: 0, y: 6.3))
            home2.addLine(to: CGPoint(x: 0, y: 12.52))
            home2.addLine(to: CGPoint(x: 0, y: 13.94))
            home2.addCurve(to: CGPoint(x: 1.07, y: 15), controlPoint1: CGPoint(x: 0, y: 14.52), controlPoint2: CGPoint(x: 0.48, y: 15))
            home2.addLine(to: CGPoint(x: 3.93, y: 15))
            home2.addCurve(to: CGPoint(x: 5, y: 13.94), controlPoint1: CGPoint(x: 4.52, y: 15), controlPoint2: CGPoint(x: 5, y: 14.52))
            home2.addLine(to: CGPoint(x: 5, y: 10.06))
            home2.addCurve(to: CGPoint(x: 6.07, y: 8.99), controlPoint1: CGPoint(x: 5, y: 9.47), controlPoint2: CGPoint(x: 5.48, y: 8.99))
            home2.addLine(to: CGPoint(x: 8.93, y: 8.99))
            home2.addCurve(to: CGPoint(x: 10, y: 10.06), controlPoint1: CGPoint(x: 9.52, y: 8.99), controlPoint2: CGPoint(x: 10, y: 9.47))
            home2.addLine(to: CGPoint(x: 10, y: 13.94))
            home2.addCurve(to: CGPoint(x: 11.07, y: 15), controlPoint1: CGPoint(x: 10, y: 14.52), controlPoint2: CGPoint(x: 10.47, y: 15))
            home2.addLine(to: CGPoint(x: 13.93, y: 15))
            home2.addCurve(to: CGPoint(x: 15, y: 13.94), controlPoint1: CGPoint(x: 14.52, y: 15), controlPoint2: CGPoint(x: 15, y: 14.52))
            home2.addLine(to: CGPoint(x: 15, y: 12.52))
            home2.addLine(to: CGPoint(x: 15, y: 6.3))
            home2.addLine(to: CGPoint(x: 15, y: 6.05))
            home2.addLine(to: CGPoint(x: 15, y: 5.91))
            home2.addCurve(to: CGPoint(x: 14.69, y: 5.23), controlPoint1: CGPoint(x: 14.98, y: 5.64), controlPoint2: CGPoint(x: 14.87, y: 5.41))
            home2.addLine(to: CGPoint(x: 14.69, y: 5.23))
            home2.close()
            home2.move(to: CGPoint(x: 14.69, y: 5.23))
            context.saveGState()
            context.translateBy(x: 14, y: 37)
            home2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            home2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Home
    
    class func imageOfHomeNoCharacters() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 2427), false, 0)
        HomeNOCharacter.drawHomeNoCharacters()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
